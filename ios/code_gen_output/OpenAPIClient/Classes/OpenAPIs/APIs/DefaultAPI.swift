//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**

     - parameter addModeratorToPublishingChannelRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addModeratorToPublishingChannel(addModeratorToPublishingChannelRequestBody: AddModeratorToPublishingChannelRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrAddModeratorToPublishingChannelFailedReasonAddModeratorToPublishingChannelSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return addModeratorToPublishingChannelWithRequestBuilder(addModeratorToPublishingChannelRequestBody: addModeratorToPublishingChannelRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/addModeratorToPublishingChannel
     - parameter addModeratorToPublishingChannelRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrAddModeratorToPublishingChannelFailedReasonAddModeratorToPublishingChannelSuccess> 
     */
    open class func addModeratorToPublishingChannelWithRequestBuilder(addModeratorToPublishingChannelRequestBody: AddModeratorToPublishingChannelRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrAddModeratorToPublishingChannelFailedReasonAddModeratorToPublishingChannelSuccess> {
        let localVariablePath = "/publishing_channel/addModeratorToPublishingChannel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addModeratorToPublishingChannelRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrAddModeratorToPublishingChannelFailedReasonAddModeratorToPublishingChannelSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter banUserFromPublishingChannelRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func banUserFromPublishingChannel(banUserFromPublishingChannelRequestBody: BanUserFromPublishingChannelRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrBanUserFromPublishingChannelFailedReasonBanUserFromPublishingChannelSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return banUserFromPublishingChannelWithRequestBuilder(banUserFromPublishingChannelRequestBody: banUserFromPublishingChannelRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/banUserFromPublishingChannel
     - parameter banUserFromPublishingChannelRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrBanUserFromPublishingChannelFailedReasonBanUserFromPublishingChannelSuccess> 
     */
    open class func banUserFromPublishingChannelWithRequestBuilder(banUserFromPublishingChannelRequestBody: BanUserFromPublishingChannelRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrBanUserFromPublishingChannelFailedReasonBanUserFromPublishingChannelSuccess> {
        let localVariablePath = "/publishing_channel/banUserFromPublishingChannel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: banUserFromPublishingChannelRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrBanUserFromPublishingChannelFailedReasonBanUserFromPublishingChannelSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter blockUserRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func blockUser(blockUserRequestBody: BlockUserRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrBlockUserFailedReasonBlockUserSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return blockUserWithRequestBuilder(blockUserRequestBody: blockUserRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /userInteractions/blockUser
     - parameter blockUserRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrBlockUserFailedReasonBlockUserSuccess> 
     */
    open class func blockUserWithRequestBuilder(blockUserRequestBody: BlockUserRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrBlockUserFailedReasonBlockUserSuccess> {
        let localVariablePath = "/userInteractions/blockUser"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: blockUserRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrBlockUserFailedReasonBlockUserSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter checkResetPasswordTokenValidityRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func checkResetPasswordTokenValidity(checkResetPasswordTokenValidityRequestBody: CheckResetPasswordTokenValidityRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherCheckResetPasswordTokenValidityFailedReasonCheckResetPasswordTokenValiditySuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return checkResetPasswordTokenValidityWithRequestBuilder(checkResetPasswordTokenValidityRequestBody: checkResetPasswordTokenValidityRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/checkResetPasswordTokenValidity
     - parameter checkResetPasswordTokenValidityRequestBody: (body)  
     - returns: RequestBuilder<EitherCheckResetPasswordTokenValidityFailedReasonCheckResetPasswordTokenValiditySuccess> 
     */
    open class func checkResetPasswordTokenValidityWithRequestBuilder(checkResetPasswordTokenValidityRequestBody: CheckResetPasswordTokenValidityRequestBody) -> RequestBuilder<EitherCheckResetPasswordTokenValidityFailedReasonCheckResetPasswordTokenValiditySuccess> {
        let localVariablePath = "/auth/checkResetPasswordTokenValidity"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: checkResetPasswordTokenValidityRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherCheckResetPasswordTokenValidityFailedReasonCheckResetPasswordTokenValiditySuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createChatMessageRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createChatMessage(createChatMessageRequestBody: CreateChatMessageRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrCreateChatMessageFailedReasonCreateChatMessageSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return createChatMessageWithRequestBuilder(createChatMessageRequestBody: createChatMessageRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /chat/create
     - parameter createChatMessageRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrCreateChatMessageFailedReasonCreateChatMessageSuccess> 
     */
    open class func createChatMessageWithRequestBuilder(createChatMessageRequestBody: CreateChatMessageRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrCreateChatMessageFailedReasonCreateChatMessageSuccess> {
        let localVariablePath = "/chat/create"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createChatMessageRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrCreateChatMessageFailedReasonCreateChatMessageSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createChatMessageInNewRoomRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createChatMessageInNewChatRoom(createChatMessageInNewRoomRequestBody: CreateChatMessageInNewRoomRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrCreateChatMessageInNewChatRoomFailedReasonCreateChatMessageInNewChatRoomSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return createChatMessageInNewChatRoomWithRequestBuilder(createChatMessageInNewRoomRequestBody: createChatMessageInNewRoomRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /chat/createChatMessageInNewChatRoom
     - parameter createChatMessageInNewRoomRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrCreateChatMessageInNewChatRoomFailedReasonCreateChatMessageInNewChatRoomSuccess> 
     */
    open class func createChatMessageInNewChatRoomWithRequestBuilder(createChatMessageInNewRoomRequestBody: CreateChatMessageInNewRoomRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrCreateChatMessageInNewChatRoomFailedReasonCreateChatMessageInNewChatRoomSuccess> {
        let localVariablePath = "/chat/createChatMessageInNewChatRoom"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createChatMessageInNewRoomRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrCreateChatMessageInNewChatRoomFailedReasonCreateChatMessageInNewChatRoomSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createPostRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createPost(createPostRequestBody: CreatePostRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrCreatePostFailedReasonCreatePostSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return createPostWithRequestBuilder(createPostRequestBody: createPostRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /post/createPost
     - parameter createPostRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrCreatePostFailedReasonCreatePostSuccess> 
     */
    open class func createPostWithRequestBuilder(createPostRequestBody: CreatePostRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrCreatePostFailedReasonCreatePostSuccess> {
        let localVariablePath = "/post/createPost"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPostRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrCreatePostFailedReasonCreatePostSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createPublishedItemCommentRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createPublishedItemComment(createPublishedItemCommentRequestBody: CreatePublishedItemCommentRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrCreatePublishedItemCommentFailedReasonCreatePublishedItemCommentSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return createPublishedItemCommentWithRequestBuilder(createPublishedItemCommentRequestBody: createPublishedItemCommentRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /PublishedItemComment/createPublishedItemComment
     - parameter createPublishedItemCommentRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrCreatePublishedItemCommentFailedReasonCreatePublishedItemCommentSuccess> 
     */
    open class func createPublishedItemCommentWithRequestBuilder(createPublishedItemCommentRequestBody: CreatePublishedItemCommentRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrCreatePublishedItemCommentFailedReasonCreatePublishedItemCommentSuccess> {
        let localVariablePath = "/PublishedItemComment/createPublishedItemComment"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPublishedItemCommentRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrCreatePublishedItemCommentFailedReasonCreatePublishedItemCommentSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createPublishingChannelRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createPublishingChannel(createPublishingChannelRequestBody: CreatePublishingChannelRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrCreatePublishingChannelFailedReasonCreatePublishingChannelSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return createPublishingChannelWithRequestBuilder(createPublishingChannelRequestBody: createPublishingChannelRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/createPublishingChannel
     - parameter createPublishingChannelRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrCreatePublishingChannelFailedReasonCreatePublishingChannelSuccess> 
     */
    open class func createPublishingChannelWithRequestBuilder(createPublishingChannelRequestBody: CreatePublishingChannelRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrCreatePublishingChannelFailedReasonCreatePublishingChannelSuccess> {
        let localVariablePath = "/publishing_channel/createPublishingChannel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPublishingChannelRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrCreatePublishingChannelFailedReasonCreatePublishingChannelSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createShopItemRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createShopItem(createShopItemRequestBody: CreateShopItemRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrCreateShopItemFailedReasonCreateShopItemSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return createShopItemWithRequestBuilder(createShopItemRequestBody: createShopItemRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shopitem/create
     - parameter createShopItemRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrCreateShopItemFailedReasonCreateShopItemSuccess> 
     */
    open class func createShopItemWithRequestBuilder(createShopItemRequestBody: CreateShopItemRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrCreateShopItemFailedReasonCreateShopItemSuccess> {
        let localVariablePath = "/shopitem/create"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createShopItemRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrCreateShopItemFailedReasonCreateShopItemSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter deleteChatMessageRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteChatMessage(deleteChatMessageRequestBody: DeleteChatMessageRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrDeleteChatMessageFailedReasonDeleteChatMessageSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteChatMessageWithRequestBuilder(deleteChatMessageRequestBody: deleteChatMessageRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /chat/deleteChatMessage
     - parameter deleteChatMessageRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrDeleteChatMessageFailedReasonDeleteChatMessageSuccess> 
     */
    open class func deleteChatMessageWithRequestBuilder(deleteChatMessageRequestBody: DeleteChatMessageRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrDeleteChatMessageFailedReasonDeleteChatMessageSuccess> {
        let localVariablePath = "/chat/deleteChatMessage"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteChatMessageRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrDeleteChatMessageFailedReasonDeleteChatMessageSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter deletePostRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deletePost(deletePostRequestBody: DeletePostRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrDeletePostFailedReasonDeletePostSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return deletePostWithRequestBuilder(deletePostRequestBody: deletePostRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /post/deletePost
     - parameter deletePostRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrDeletePostFailedReasonDeletePostSuccess> 
     */
    open class func deletePostWithRequestBuilder(deletePostRequestBody: DeletePostRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrDeletePostFailedReasonDeletePostSuccess> {
        let localVariablePath = "/post/deletePost"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deletePostRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrDeletePostFailedReasonDeletePostSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter deletePublishedItemCommentRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deletePublishedItemComment(deletePublishedItemCommentRequestBody: DeletePublishedItemCommentRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrDeletePublishedItemCommentFailedReasonDeletePublishedItemCommentSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return deletePublishedItemCommentWithRequestBuilder(deletePublishedItemCommentRequestBody: deletePublishedItemCommentRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /PublishedItemComment/deletePublishedItemComment
     - parameter deletePublishedItemCommentRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrDeletePublishedItemCommentFailedReasonDeletePublishedItemCommentSuccess> 
     */
    open class func deletePublishedItemCommentWithRequestBuilder(deletePublishedItemCommentRequestBody: DeletePublishedItemCommentRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrDeletePublishedItemCommentFailedReasonDeletePublishedItemCommentSuccess> {
        let localVariablePath = "/PublishedItemComment/deletePublishedItemComment"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deletePublishedItemCommentRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrDeletePublishedItemCommentFailedReasonDeletePublishedItemCommentSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter deletePublishingChannelRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deletePublishingChannel(deletePublishingChannelRequestBody: DeletePublishingChannelRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrDeletePublishingChannelFailedReasonDeletePublishingChannelSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return deletePublishingChannelWithRequestBuilder(deletePublishingChannelRequestBody: deletePublishingChannelRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/deletePublishingChannel
     - parameter deletePublishingChannelRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrDeletePublishingChannelFailedReasonDeletePublishingChannelSuccess> 
     */
    open class func deletePublishingChannelWithRequestBuilder(deletePublishingChannelRequestBody: DeletePublishingChannelRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrDeletePublishingChannelFailedReasonDeletePublishingChannelSuccess> {
        let localVariablePath = "/publishing_channel/deletePublishingChannel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deletePublishingChannelRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrDeletePublishingChannelFailedReasonDeletePublishingChannelSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter deleteShopItemRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteShopItem(deleteShopItemRequestBody: DeleteShopItemRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrDeleteShopItemFailedReasonDeleteShopItemSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteShopItemWithRequestBuilder(deleteShopItemRequestBody: deleteShopItemRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shopitem/delete
     - parameter deleteShopItemRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrDeleteShopItemFailedReasonDeleteShopItemSuccess> 
     */
    open class func deleteShopItemWithRequestBuilder(deleteShopItemRequestBody: DeleteShopItemRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrDeleteShopItemFailedReasonDeleteShopItemSuccess> {
        let localVariablePath = "/shopitem/delete"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteShopItemRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrDeleteShopItemFailedReasonDeleteShopItemSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter doesChatRoomExistWithUserIdsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func doesChatRoomExistWithUserIds(doesChatRoomExistWithUserIdsRequestBody: DoesChatRoomExistWithUserIdsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrDoesChatRoomExistWithUserIdsFailedReasonDoesChatRoomExistWithUserIdsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return doesChatRoomExistWithUserIdsWithRequestBuilder(doesChatRoomExistWithUserIdsRequestBody: doesChatRoomExistWithUserIdsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /chat/doesChatRoomExistWithUserIds
     - parameter doesChatRoomExistWithUserIdsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrDoesChatRoomExistWithUserIdsFailedReasonDoesChatRoomExistWithUserIdsSuccess> 
     */
    open class func doesChatRoomExistWithUserIdsWithRequestBuilder(doesChatRoomExistWithUserIdsRequestBody: DoesChatRoomExistWithUserIdsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrDoesChatRoomExistWithUserIdsFailedReasonDoesChatRoomExistWithUserIdsSuccess> {
        let localVariablePath = "/chat/doesChatRoomExistWithUserIds"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: doesChatRoomExistWithUserIdsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrDoesChatRoomExistWithUserIdsFailedReasonDoesChatRoomExistWithUserIdsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter elevateUserToAdminRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func elevateUserToAdmin(elevateUserToAdminRequestBody: ElevateUserToAdminRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrElevateUserToAdminFailedReasonElevateUserToAdminSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return elevateUserToAdminWithRequestBuilder(elevateUserToAdminRequestBody: elevateUserToAdminRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/elevateUserToAdmin
     - parameter elevateUserToAdminRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrElevateUserToAdminFailedReasonElevateUserToAdminSuccess> 
     */
    open class func elevateUserToAdminWithRequestBuilder(elevateUserToAdminRequestBody: ElevateUserToAdminRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrElevateUserToAdminFailedReasonElevateUserToAdminSuccess> {
        let localVariablePath = "/auth/elevateUserToAdmin"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: elevateUserToAdminRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrElevateUserToAdminFailedReasonElevateUserToAdminSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter followPublishingChannelRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func followPublishingChannel(followPublishingChannelRequestBody: FollowPublishingChannelRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrFollowPublishingChannelFailedReasonFollowPublishingChannelSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return followPublishingChannelWithRequestBuilder(followPublishingChannelRequestBody: followPublishingChannelRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/followPublishingChannel
     - parameter followPublishingChannelRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrFollowPublishingChannelFailedReasonFollowPublishingChannelSuccess> 
     */
    open class func followPublishingChannelWithRequestBuilder(followPublishingChannelRequestBody: FollowPublishingChannelRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrFollowPublishingChannelFailedReasonFollowPublishingChannelSuccess> {
        let localVariablePath = "/publishing_channel/followPublishingChannel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: followPublishingChannelRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrFollowPublishingChannelFailedReasonFollowPublishingChannelSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter followUserRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func followUser(followUserRequestBody: FollowUserRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrFollowUserFailedReasonFollowUserSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return followUserWithRequestBuilder(followUserRequestBody: followUserRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /userInteractions/followUser
     - parameter followUserRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrFollowUserFailedReasonFollowUserSuccess> 
     */
    open class func followUserWithRequestBuilder(followUserRequestBody: FollowUserRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrFollowUserFailedReasonFollowUserSuccess> {
        let localVariablePath = "/userInteractions/followUser"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: followUserRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrFollowUserFailedReasonFollowUserSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getChatRoomByIdRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getChatRoomById(getChatRoomByIdRequestBody: GetChatRoomByIdRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetChatRoomByIdFailedReasonGetChatRoomByIdSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getChatRoomByIdWithRequestBuilder(getChatRoomByIdRequestBody: getChatRoomByIdRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /chat/getChatRoomById
     - parameter getChatRoomByIdRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetChatRoomByIdFailedReasonGetChatRoomByIdSuccess> 
     */
    open class func getChatRoomByIdWithRequestBuilder(getChatRoomByIdRequestBody: GetChatRoomByIdRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetChatRoomByIdFailedReasonGetChatRoomByIdSuccess> {
        let localVariablePath = "/chat/getChatRoomById"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getChatRoomByIdRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetChatRoomByIdFailedReasonGetChatRoomByIdSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getClientUserProfile(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetClientUserProfileFailedReasonGetClientUserProfileSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getClientUserProfileWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /user/GetClientUserProfile
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetClientUserProfileFailedReasonGetClientUserProfileSuccess> 
     */
    open class func getClientUserProfileWithRequestBuilder() -> RequestBuilder<EitherErrorReasonTypesStringOrGetClientUserProfileFailedReasonGetClientUserProfileSuccess> {
        let localVariablePath = "/user/GetClientUserProfile"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetClientUserProfileFailedReasonGetClientUserProfileSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCountOfUnreadChatRooms(body: AnyCodable, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetCountOfUnreadChatRoomsFailedReasonGetCountOfUnreadChatRoomsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getCountOfUnreadChatRoomsWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /chat/getCountOfUnreadChatRooms
     - parameter body: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetCountOfUnreadChatRoomsFailedReasonGetCountOfUnreadChatRoomsSuccess> 
     */
    open class func getCountOfUnreadChatRoomsWithRequestBuilder(body: AnyCodable) -> RequestBuilder<EitherErrorReasonTypesStringOrGetCountOfUnreadChatRoomsFailedReasonGetCountOfUnreadChatRoomsSuccess> {
        let localVariablePath = "/chat/getCountOfUnreadChatRooms"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetCountOfUnreadChatRoomsFailedReasonGetCountOfUnreadChatRoomsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCountOfUnreadNotifications(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetCountOfUnreadNotificationsFailedReasonGetCountOfUnreadNotificationsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getCountOfUnreadNotificationsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /notification/getCountOfUnreadNotifications
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetCountOfUnreadNotificationsFailedReasonGetCountOfUnreadNotificationsSuccess> 
     */
    open class func getCountOfUnreadNotificationsWithRequestBuilder() -> RequestBuilder<EitherErrorReasonTypesStringOrGetCountOfUnreadNotificationsFailedReasonGetCountOfUnreadNotificationsSuccess> {
        let localVariablePath = "/notification/getCountOfUnreadNotifications"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetCountOfUnreadNotificationsFailedReasonGetCountOfUnreadNotificationsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCreditCardsStoredByUserId(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetCreditCardsStoredByUserIdFailedReasonGetCreditCardsStoredByUserIdSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getCreditCardsStoredByUserIdWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shopitem/getCreditCardsStoredByUserId
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetCreditCardsStoredByUserIdFailedReasonGetCreditCardsStoredByUserIdSuccess> 
     */
    open class func getCreditCardsStoredByUserIdWithRequestBuilder() -> RequestBuilder<EitherErrorReasonTypesStringOrGetCreditCardsStoredByUserIdFailedReasonGetCreditCardsStoredByUserIdSuccess> {
        let localVariablePath = "/shopitem/getCreditCardsStoredByUserId"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetCreditCardsStoredByUserIdFailedReasonGetCreditCardsStoredByUserIdSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getFollowerRequestsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getFollowerRequests(getFollowerRequestsRequestBody: GetFollowerRequestsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetFollowerRequestsFailedReasonGetFollowerRequestsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getFollowerRequestsWithRequestBuilder(getFollowerRequestsRequestBody: getFollowerRequestsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /userInteractions/getFollowerRequests
     - parameter getFollowerRequestsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetFollowerRequestsFailedReasonGetFollowerRequestsSuccess> 
     */
    open class func getFollowerRequestsWithRequestBuilder(getFollowerRequestsRequestBody: GetFollowerRequestsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetFollowerRequestsFailedReasonGetFollowerRequestsSuccess> {
        let localVariablePath = "/userInteractions/getFollowerRequests"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getFollowerRequestsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetFollowerRequestsFailedReasonGetFollowerRequestsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPageOfAllPublishedItemsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPageOfALLPUBLISHEDITEMS(getPageOfAllPublishedItemsRequestBody: GetPageOfAllPublishedItemsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPageOfAllPublishedItemsFailedReasonGetPageOfAllPublishedItemsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPageOfALLPUBLISHEDITEMSWithRequestBuilder(getPageOfAllPublishedItemsRequestBody: getPageOfAllPublishedItemsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /feed/getPageOf_ALL_PUBLISHED_ITEMS
     - parameter getPageOfAllPublishedItemsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfAllPublishedItemsFailedReasonGetPageOfAllPublishedItemsSuccess> 
     */
    open class func getPageOfALLPUBLISHEDITEMSWithRequestBuilder(getPageOfAllPublishedItemsRequestBody: GetPageOfAllPublishedItemsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfAllPublishedItemsFailedReasonGetPageOfAllPublishedItemsSuccess> {
        let localVariablePath = "/feed/getPageOf_ALL_PUBLISHED_ITEMS"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPageOfAllPublishedItemsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfAllPublishedItemsFailedReasonGetPageOfAllPublishedItemsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPageOfChatMessagesRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPageOfChatMessages(getPageOfChatMessagesRequestBody: GetPageOfChatMessagesRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPageOfChatMessagesFailedReasonGetPageOfChatMessagesSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPageOfChatMessagesWithRequestBuilder(getPageOfChatMessagesRequestBody: getPageOfChatMessagesRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /chat/getPageOfChatMessages
     - parameter getPageOfChatMessagesRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfChatMessagesFailedReasonGetPageOfChatMessagesSuccess> 
     */
    open class func getPageOfChatMessagesWithRequestBuilder(getPageOfChatMessagesRequestBody: GetPageOfChatMessagesRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfChatMessagesFailedReasonGetPageOfChatMessagesSuccess> {
        let localVariablePath = "/chat/getPageOfChatMessages"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPageOfChatMessagesRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfChatMessagesFailedReasonGetPageOfChatMessagesSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPageOfChatRoomsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPageOfChatRooms(getPageOfChatRoomsRequestBody: GetPageOfChatRoomsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPageOfChatRoomsFailedReasonGetPageOfChatRoomsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPageOfChatRoomsWithRequestBuilder(getPageOfChatRoomsRequestBody: getPageOfChatRoomsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /chat/getPageOfChatRooms
     - parameter getPageOfChatRoomsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfChatRoomsFailedReasonGetPageOfChatRoomsSuccess> 
     */
    open class func getPageOfChatRoomsWithRequestBuilder(getPageOfChatRoomsRequestBody: GetPageOfChatRoomsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfChatRoomsFailedReasonGetPageOfChatRoomsSuccess> {
        let localVariablePath = "/chat/getPageOfChatRooms"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPageOfChatRoomsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfChatRoomsFailedReasonGetPageOfChatRoomsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPageOfNotificationsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPageOfNotifications(getPageOfNotificationsRequestBody: GetPageOfNotificationsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPageOfNotificationsFailedReasonGetPageOfNotificationsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPageOfNotificationsWithRequestBuilder(getPageOfNotificationsRequestBody: getPageOfNotificationsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /notification/getPageOfNotifications
     - parameter getPageOfNotificationsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfNotificationsFailedReasonGetPageOfNotificationsSuccess> 
     */
    open class func getPageOfNotificationsWithRequestBuilder(getPageOfNotificationsRequestBody: GetPageOfNotificationsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfNotificationsFailedReasonGetPageOfNotificationsSuccess> {
        let localVariablePath = "/notification/getPageOfNotifications"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPageOfNotificationsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfNotificationsFailedReasonGetPageOfNotificationsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPageOfUsersFollowedByUserIdRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPageOfUsersFollowedByUserId(getPageOfUsersFollowedByUserIdRequestBody: GetPageOfUsersFollowedByUserIdRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPageOfUsersFollowedByUserIdFailedReasonGetPageOfUsersFollowedByUserIdSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPageOfUsersFollowedByUserIdWithRequestBuilder(getPageOfUsersFollowedByUserIdRequestBody: getPageOfUsersFollowedByUserIdRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /user/getPageOfUsersFollowedByUserId
     - parameter getPageOfUsersFollowedByUserIdRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfUsersFollowedByUserIdFailedReasonGetPageOfUsersFollowedByUserIdSuccess> 
     */
    open class func getPageOfUsersFollowedByUserIdWithRequestBuilder(getPageOfUsersFollowedByUserIdRequestBody: GetPageOfUsersFollowedByUserIdRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfUsersFollowedByUserIdFailedReasonGetPageOfUsersFollowedByUserIdSuccess> {
        let localVariablePath = "/user/getPageOfUsersFollowedByUserId"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPageOfUsersFollowedByUserIdRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfUsersFollowedByUserIdFailedReasonGetPageOfUsersFollowedByUserIdSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPageOfUsersFollowingUserIdRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPageOfUsersFollowingUserId(getPageOfUsersFollowingUserIdRequestBody: GetPageOfUsersFollowingUserIdRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPageOfUsersFollowingUserIdFailedReasonGetPageOfUsersFollowingUserIdSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPageOfUsersFollowingUserIdWithRequestBuilder(getPageOfUsersFollowingUserIdRequestBody: getPageOfUsersFollowingUserIdRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /user/getPageOfUsersFollowingUserId
     - parameter getPageOfUsersFollowingUserIdRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfUsersFollowingUserIdFailedReasonGetPageOfUsersFollowingUserIdSuccess> 
     */
    open class func getPageOfUsersFollowingUserIdWithRequestBuilder(getPageOfUsersFollowingUserIdRequestBody: GetPageOfUsersFollowingUserIdRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfUsersFollowingUserIdFailedReasonGetPageOfUsersFollowingUserIdSuccess> {
        let localVariablePath = "/user/getPageOfUsersFollowingUserId"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPageOfUsersFollowingUserIdRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPageOfUsersFollowingUserIdFailedReasonGetPageOfUsersFollowingUserIdSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPasswordResetEmailRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPasswordResetEmail(getPasswordResetEmailRequestBody: GetPasswordResetEmailRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPasswordResetEmailFailedReasonGetPasswordResetEmailSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPasswordResetEmailWithRequestBuilder(getPasswordResetEmailRequestBody: getPasswordResetEmailRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/getPasswordResetEmail
     - parameter getPasswordResetEmailRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPasswordResetEmailFailedReasonGetPasswordResetEmailSuccess> 
     */
    open class func getPasswordResetEmailWithRequestBuilder(getPasswordResetEmailRequestBody: GetPasswordResetEmailRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPasswordResetEmailFailedReasonGetPasswordResetEmailSuccess> {
        let localVariablePath = "/auth/getPasswordResetEmail"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPasswordResetEmailRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPasswordResetEmailFailedReasonGetPasswordResetEmailSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPublishedItemsScheduledByUserRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPostsScheduledByUser(getPublishedItemsScheduledByUserRequestBody: GetPublishedItemsScheduledByUserRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPublishedItemsScheduledByUserFailedReasonGetPublishedItemsScheduledByUserSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPostsScheduledByUserWithRequestBuilder(getPublishedItemsScheduledByUserRequestBody: getPublishedItemsScheduledByUserRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /post/getPostsScheduledByUser
     - parameter getPublishedItemsScheduledByUserRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsScheduledByUserFailedReasonGetPublishedItemsScheduledByUserSuccess> 
     */
    open class func getPostsScheduledByUserWithRequestBuilder(getPublishedItemsScheduledByUserRequestBody: GetPublishedItemsScheduledByUserRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsScheduledByUserFailedReasonGetPublishedItemsScheduledByUserSuccess> {
        let localVariablePath = "/post/getPostsScheduledByUser"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPublishedItemsScheduledByUserRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsScheduledByUserFailedReasonGetPublishedItemsScheduledByUserSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPublishedItemByIdRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPublishedItemById(getPublishedItemByIdRequestBody: GetPublishedItemByIdRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPublishedItemByIdFailedReasonGetPublishedItemByIdSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPublishedItemByIdWithRequestBuilder(getPublishedItemByIdRequestBody: getPublishedItemByIdRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /post/getPublishedItemById
     - parameter getPublishedItemByIdRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemByIdFailedReasonGetPublishedItemByIdSuccess> 
     */
    open class func getPublishedItemByIdWithRequestBuilder(getPublishedItemByIdRequestBody: GetPublishedItemByIdRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemByIdFailedReasonGetPublishedItemByIdSuccess> {
        let localVariablePath = "/post/getPublishedItemById"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPublishedItemByIdRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemByIdFailedReasonGetPublishedItemByIdSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPublishedItemsByUserIdRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPublishedItemsByUserId(getPublishedItemsByUserIdRequestBody: GetPublishedItemsByUserIdRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPublishedItemsByUsernameFailedReasonGetPublishedItemsByUsernameSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPublishedItemsByUserIdWithRequestBuilder(getPublishedItemsByUserIdRequestBody: getPublishedItemsByUserIdRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /post/getPublishedItemsByUserId
     - parameter getPublishedItemsByUserIdRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsByUsernameFailedReasonGetPublishedItemsByUsernameSuccess> 
     */
    open class func getPublishedItemsByUserIdWithRequestBuilder(getPublishedItemsByUserIdRequestBody: GetPublishedItemsByUserIdRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsByUsernameFailedReasonGetPublishedItemsByUsernameSuccess> {
        let localVariablePath = "/post/getPublishedItemsByUserId"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPublishedItemsByUserIdRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsByUsernameFailedReasonGetPublishedItemsByUsernameSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPublishedItemsByUsernameRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPublishedItemsByUsername(getPublishedItemsByUsernameRequestBody: GetPublishedItemsByUsernameRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPublishedItemsByUsernameFailedReasonGetPublishedItemsByUsernameSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPublishedItemsByUsernameWithRequestBuilder(getPublishedItemsByUsernameRequestBody: getPublishedItemsByUsernameRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /post/getPublishedItemsByUsername
     - parameter getPublishedItemsByUsernameRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsByUsernameFailedReasonGetPublishedItemsByUsernameSuccess> 
     */
    open class func getPublishedItemsByUsernameWithRequestBuilder(getPublishedItemsByUsernameRequestBody: GetPublishedItemsByUsernameRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsByUsernameFailedReasonGetPublishedItemsByUsernameSuccess> {
        let localVariablePath = "/post/getPublishedItemsByUsername"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPublishedItemsByUsernameRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsByUsernameFailedReasonGetPublishedItemsByUsernameSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPublishedItemsFromAllFollowingsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPublishedItemsFromAllFollowings(getPublishedItemsFromAllFollowingsRequestBody: GetPublishedItemsFromAllFollowingsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPublishedItemsFromAllFollowingsFailedReasonGetPublishedItemsFromAllFollowingsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPublishedItemsFromAllFollowingsWithRequestBuilder(getPublishedItemsFromAllFollowingsRequestBody: getPublishedItemsFromAllFollowingsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /feed/getPublishedItemsFromAllFollowings
     - parameter getPublishedItemsFromAllFollowingsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsFromAllFollowingsFailedReasonGetPublishedItemsFromAllFollowingsSuccess> 
     */
    open class func getPublishedItemsFromAllFollowingsWithRequestBuilder(getPublishedItemsFromAllFollowingsRequestBody: GetPublishedItemsFromAllFollowingsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsFromAllFollowingsFailedReasonGetPublishedItemsFromAllFollowingsSuccess> {
        let localVariablePath = "/feed/getPublishedItemsFromAllFollowings"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPublishedItemsFromAllFollowingsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsFromAllFollowingsFailedReasonGetPublishedItemsFromAllFollowingsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPublishedItemsFromFollowedHashtagRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPublishedItemsFromFollowedHashtag(getPublishedItemsFromFollowedHashtagRequestBody: GetPublishedItemsFromFollowedHashtagRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPublishedItemsFromFollowedHashtagFailedReasonGetPublishedItemsFromFollowedHashtagSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPublishedItemsFromFollowedHashtagWithRequestBuilder(getPublishedItemsFromFollowedHashtagRequestBody: getPublishedItemsFromFollowedHashtagRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /feed/getPublishedItemsFromFollowedHashtag
     - parameter getPublishedItemsFromFollowedHashtagRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsFromFollowedHashtagFailedReasonGetPublishedItemsFromFollowedHashtagSuccess> 
     */
    open class func getPublishedItemsFromFollowedHashtagWithRequestBuilder(getPublishedItemsFromFollowedHashtagRequestBody: GetPublishedItemsFromFollowedHashtagRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsFromFollowedHashtagFailedReasonGetPublishedItemsFromFollowedHashtagSuccess> {
        let localVariablePath = "/feed/getPublishedItemsFromFollowedHashtag"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPublishedItemsFromFollowedHashtagRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsFromFollowedHashtagFailedReasonGetPublishedItemsFromFollowedHashtagSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPublishedItemsFromFollowedUsersRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPublishedItemsFromFollowedUsers(getPublishedItemsFromFollowedUsersRequestBody: GetPublishedItemsFromFollowedUsersRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPublishedItemsFromFollowedUsersFailedReasonGetPublishedItemsFromFollowedUsersSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPublishedItemsFromFollowedUsersWithRequestBuilder(getPublishedItemsFromFollowedUsersRequestBody: getPublishedItemsFromFollowedUsersRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /feed/getPublishedItemsFromFollowedUsers
     - parameter getPublishedItemsFromFollowedUsersRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsFromFollowedUsersFailedReasonGetPublishedItemsFromFollowedUsersSuccess> 
     */
    open class func getPublishedItemsFromFollowedUsersWithRequestBuilder(getPublishedItemsFromFollowedUsersRequestBody: GetPublishedItemsFromFollowedUsersRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsFromFollowedUsersFailedReasonGetPublishedItemsFromFollowedUsersSuccess> {
        let localVariablePath = "/feed/getPublishedItemsFromFollowedUsers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPublishedItemsFromFollowedUsersRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsFromFollowedUsersFailedReasonGetPublishedItemsFromFollowedUsersSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPublishedItemsInPublishingChannelRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPublishedItemsInPublishingChannel(getPublishedItemsInPublishingChannelRequestBody: GetPublishedItemsInPublishingChannelRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPublishedItemsInPublishingChannelFailedReasonGetPublishedItemsInPublishingChannelSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPublishedItemsInPublishingChannelWithRequestBuilder(getPublishedItemsInPublishingChannelRequestBody: getPublishedItemsInPublishingChannelRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/getPublishedItemsInPublishingChannel
     - parameter getPublishedItemsInPublishingChannelRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsInPublishingChannelFailedReasonGetPublishedItemsInPublishingChannelSuccess> 
     */
    open class func getPublishedItemsInPublishingChannelWithRequestBuilder(getPublishedItemsInPublishingChannelRequestBody: GetPublishedItemsInPublishingChannelRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsInPublishingChannelFailedReasonGetPublishedItemsInPublishingChannelSuccess> {
        let localVariablePath = "/publishing_channel/getPublishedItemsInPublishingChannel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPublishedItemsInPublishingChannelRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishedItemsInPublishingChannelFailedReasonGetPublishedItemsInPublishingChannelSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPublishingChannelByNameRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPublishingChannelByName(getPublishingChannelByNameRequestBody: GetPublishingChannelByNameRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPublishingChannelByNameFailedReasonGetPublishingChannelByNameSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPublishingChannelByNameWithRequestBuilder(getPublishingChannelByNameRequestBody: getPublishingChannelByNameRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/getPublishingChannelByName
     - parameter getPublishingChannelByNameRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishingChannelByNameFailedReasonGetPublishingChannelByNameSuccess> 
     */
    open class func getPublishingChannelByNameWithRequestBuilder(getPublishingChannelByNameRequestBody: GetPublishingChannelByNameRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPublishingChannelByNameFailedReasonGetPublishingChannelByNameSuccess> {
        let localVariablePath = "/publishing_channel/getPublishingChannelByName"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPublishingChannelByNameRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishingChannelByNameFailedReasonGetPublishingChannelByNameSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter isPublishingChannelNameValidRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPublishingChannelNameValidity(isPublishingChannelNameValidRequestBody: IsPublishingChannelNameValidRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrIsPublishingChannelNameValidFailedReasonIsPublishingChannelNameValidSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPublishingChannelNameValidityWithRequestBuilder(isPublishingChannelNameValidRequestBody: isPublishingChannelNameValidRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/getPublishingChannelNameValidity
     - parameter isPublishingChannelNameValidRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrIsPublishingChannelNameValidFailedReasonIsPublishingChannelNameValidSuccess> 
     */
    open class func getPublishingChannelNameValidityWithRequestBuilder(isPublishingChannelNameValidRequestBody: IsPublishingChannelNameValidRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrIsPublishingChannelNameValidFailedReasonIsPublishingChannelNameValidSuccess> {
        let localVariablePath = "/publishing_channel/getPublishingChannelNameValidity"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: isPublishingChannelNameValidRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrIsPublishingChannelNameValidFailedReasonIsPublishingChannelNameValidSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPublishingChannelSubmissionsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPublishingChannelSubmissions(getPublishingChannelSubmissionsRequestBody: GetPublishingChannelSubmissionsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPublishingChannelSubmissionsFailedReasonGetPublishingChannelSubmissionsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPublishingChannelSubmissionsWithRequestBuilder(getPublishingChannelSubmissionsRequestBody: getPublishingChannelSubmissionsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/getPublishingChannelSubmissions
     - parameter getPublishingChannelSubmissionsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishingChannelSubmissionsFailedReasonGetPublishingChannelSubmissionsSuccess> 
     */
    open class func getPublishingChannelSubmissionsWithRequestBuilder(getPublishingChannelSubmissionsRequestBody: GetPublishingChannelSubmissionsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPublishingChannelSubmissionsFailedReasonGetPublishingChannelSubmissionsSuccess> {
        let localVariablePath = "/publishing_channel/getPublishingChannelSubmissions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPublishingChannelSubmissionsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishingChannelSubmissionsFailedReasonGetPublishingChannelSubmissionsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getPublishingChannelsFollowedByUserIdRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPublishingChannelsFollowedByUserId(getPublishingChannelsFollowedByUserIdRequestBody: GetPublishingChannelsFollowedByUserIdRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetPublishingChannelsFollowedByUserIdFailedReasonGetPublishingChannelsFollowedByUserIdSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getPublishingChannelsFollowedByUserIdWithRequestBuilder(getPublishingChannelsFollowedByUserIdRequestBody: getPublishingChannelsFollowedByUserIdRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/getPublishingChannelsFollowedByUserId
     - parameter getPublishingChannelsFollowedByUserIdRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishingChannelsFollowedByUserIdFailedReasonGetPublishingChannelsFollowedByUserIdSuccess> 
     */
    open class func getPublishingChannelsFollowedByUserIdWithRequestBuilder(getPublishingChannelsFollowedByUserIdRequestBody: GetPublishingChannelsFollowedByUserIdRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetPublishingChannelsFollowedByUserIdFailedReasonGetPublishingChannelsFollowedByUserIdSuccess> {
        let localVariablePath = "/publishing_channel/getPublishingChannelsFollowedByUserId"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPublishingChannelsFollowedByUserIdRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetPublishingChannelsFollowedByUserIdFailedReasonGetPublishingChannelsFollowedByUserIdSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRecommendedPublishedItems(body: AnyCodable, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetRecommendedPublishedItemsFailedReasonGetRecommendedPublishedItemsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getRecommendedPublishedItemsWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /discover/getRecommendedPublishedItems
     - parameter body: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetRecommendedPublishedItemsFailedReasonGetRecommendedPublishedItemsSuccess> 
     */
    open class func getRecommendedPublishedItemsWithRequestBuilder(body: AnyCodable) -> RequestBuilder<EitherErrorReasonTypesStringOrGetRecommendedPublishedItemsFailedReasonGetRecommendedPublishedItemsSuccess> {
        let localVariablePath = "/discover/getRecommendedPublishedItems"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetRecommendedPublishedItemsFailedReasonGetRecommendedPublishedItemsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRecommendedPublishingChannels(body: AnyCodable, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetRecommendedPublishingChannelsFailedReasonGetRecommendedPublishingChannelsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getRecommendedPublishingChannelsWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /discover/getRecommendedPublishingChannels
     - parameter body: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetRecommendedPublishingChannelsFailedReasonGetRecommendedPublishingChannelsSuccess> 
     */
    open class func getRecommendedPublishingChannelsWithRequestBuilder(body: AnyCodable) -> RequestBuilder<EitherErrorReasonTypesStringOrGetRecommendedPublishingChannelsFailedReasonGetRecommendedPublishingChannelsSuccess> {
        let localVariablePath = "/discover/getRecommendedPublishingChannels"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetRecommendedPublishingChannelsFailedReasonGetRecommendedPublishingChannelsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRecommendedUsersToFollow(body: AnyCodable, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetRecommendedUsersToFollowFailedReasonGetRecommendedUsersToFollowSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getRecommendedUsersToFollowWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /discover/getRecommendedUsersToFollow
     - parameter body: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetRecommendedUsersToFollowFailedReasonGetRecommendedUsersToFollowSuccess> 
     */
    open class func getRecommendedUsersToFollowWithRequestBuilder(body: AnyCodable) -> RequestBuilder<EitherErrorReasonTypesStringOrGetRecommendedUsersToFollowFailedReasonGetRecommendedUsersToFollowSuccess> {
        let localVariablePath = "/discover/getRecommendedUsersToFollow"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetRecommendedUsersToFollowFailedReasonGetRecommendedUsersToFollowSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getSavedPublishedItemsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSavedPublishedItems(getSavedPublishedItemsRequestBody: GetSavedPublishedItemsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetSavedPublishedItemsFailedReasonGetSavedPublishedItemsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getSavedPublishedItemsWithRequestBuilder(getSavedPublishedItemsRequestBody: getSavedPublishedItemsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /post/getSavedPublishedItems
     - parameter getSavedPublishedItemsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetSavedPublishedItemsFailedReasonGetSavedPublishedItemsSuccess> 
     */
    open class func getSavedPublishedItemsWithRequestBuilder(getSavedPublishedItemsRequestBody: GetSavedPublishedItemsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetSavedPublishedItemsFailedReasonGetSavedPublishedItemsSuccess> {
        let localVariablePath = "/post/getSavedPublishedItems"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getSavedPublishedItemsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetSavedPublishedItemsFailedReasonGetSavedPublishedItemsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserContentFeedFilters(body: AnyCodable, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetUserContentFeedFiltersFailedReasonGetUserContentFeedFiltersSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserContentFeedFiltersWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /feed/getUserContentFeedFilters
     - parameter body: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetUserContentFeedFiltersFailedReasonGetUserContentFeedFiltersSuccess> 
     */
    open class func getUserContentFeedFiltersWithRequestBuilder(body: AnyCodable) -> RequestBuilder<EitherErrorReasonTypesStringOrGetUserContentFeedFiltersFailedReasonGetUserContentFeedFiltersSuccess> {
        let localVariablePath = "/feed/getUserContentFeedFilters"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetUserContentFeedFiltersFailedReasonGetUserContentFeedFiltersSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getUserProfileRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserProfile(getUserProfileRequestBody: GetUserProfileRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetUserProfileFailedReasonGetUserProfileSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserProfileWithRequestBuilder(getUserProfileRequestBody: getUserProfileRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /user/GetUserProfile
     - parameter getUserProfileRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetUserProfileFailedReasonGetUserProfileSuccess> 
     */
    open class func getUserProfileWithRequestBuilder(getUserProfileRequestBody: GetUserProfileRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetUserProfileFailedReasonGetUserProfileSuccess> {
        let localVariablePath = "/user/GetUserProfile"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getUserProfileRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetUserProfileFailedReasonGetUserProfileSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getUsersByIdsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUsersByIds(getUsersByIdsRequestBody: GetUsersByIdsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetUsersByIdsFailedReasonGetUsersByIdsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getUsersByIdsWithRequestBuilder(getUsersByIdsRequestBody: getUsersByIdsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /user/getUsersByIds
     - parameter getUsersByIdsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetUsersByIdsFailedReasonGetUsersByIdsSuccess> 
     */
    open class func getUsersByIdsWithRequestBuilder(getUsersByIdsRequestBody: GetUsersByIdsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetUsersByIdsFailedReasonGetUsersByIdsSuccess> {
        let localVariablePath = "/user/getUsersByIds"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getUsersByIdsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetUsersByIdsFailedReasonGetUsersByIdsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getUsersByUsernamesRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUsersByUsernames(getUsersByUsernamesRequestBody: GetUsersByUsernamesRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetUsersByUsernamesFailedReasonGetUsersByUsernamesSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getUsersByUsernamesWithRequestBuilder(getUsersByUsernamesRequestBody: getUsersByUsernamesRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /user/getUsersByUsernames
     - parameter getUsersByUsernamesRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetUsersByUsernamesFailedReasonGetUsersByUsernamesSuccess> 
     */
    open class func getUsersByUsernamesWithRequestBuilder(getUsersByUsernamesRequestBody: GetUsersByUsernamesRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrGetUsersByUsernamesFailedReasonGetUsersByUsernamesSuccess> {
        let localVariablePath = "/user/getUsersByUsernames"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getUsersByUsernamesRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetUsersByUsernamesFailedReasonGetUsersByUsernamesSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVerifyUserEmail(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrGetVerifyUserEmailFailedReasonGetVerifyUserEmailSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return getVerifyUserEmailWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/getVerifyUserEmail
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrGetVerifyUserEmailFailedReasonGetVerifyUserEmailSuccess> 
     */
    open class func getVerifyUserEmailWithRequestBuilder() -> RequestBuilder<EitherErrorReasonTypesStringOrGetVerifyUserEmailFailedReasonGetVerifyUserEmailSuccess> {
        let localVariablePath = "/auth/getVerifyUserEmail"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrGetVerifyUserEmailFailedReasonGetVerifyUserEmailSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter inviteUserToFollowPublishingChannelRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func inviteUserToFollowPublishingChannel(inviteUserToFollowPublishingChannelRequestBody: InviteUserToFollowPublishingChannelRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrInviteUserToFollowPublishingChannelFailedReasonInviteUserToFollowPublishingChannelSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return inviteUserToFollowPublishingChannelWithRequestBuilder(inviteUserToFollowPublishingChannelRequestBody: inviteUserToFollowPublishingChannelRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/inviteUserToFollowPublishingChannel
     - parameter inviteUserToFollowPublishingChannelRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrInviteUserToFollowPublishingChannelFailedReasonInviteUserToFollowPublishingChannelSuccess> 
     */
    open class func inviteUserToFollowPublishingChannelWithRequestBuilder(inviteUserToFollowPublishingChannelRequestBody: InviteUserToFollowPublishingChannelRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrInviteUserToFollowPublishingChannelFailedReasonInviteUserToFollowPublishingChannelSuccess> {
        let localVariablePath = "/publishing_channel/inviteUserToFollowPublishingChannel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inviteUserToFollowPublishingChannelRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrInviteUserToFollowPublishingChannelFailedReasonInviteUserToFollowPublishingChannelSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter loginUserRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func loginUser(loginUserRequestBody: LoginUserRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrAuthFailedReasonAuthSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return loginUserWithRequestBuilder(loginUserRequestBody: loginUserRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/login
     - parameter loginUserRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrAuthFailedReasonAuthSuccess> 
     */
    open class func loginUserWithRequestBuilder(loginUserRequestBody: LoginUserRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrAuthFailedReasonAuthSuccess> {
        let localVariablePath = "/auth/login"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginUserRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrAuthFailedReasonAuthSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func logout(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return logoutWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /auth/logout
     - returns: RequestBuilder<Void> 
     */
    open class func logoutWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/auth/logout"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter makeCreditCardPrimaryRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func makeCardPrimary(makeCreditCardPrimaryRequestBody: MakeCreditCardPrimaryRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrMakeCreditCardPrimaryFailedReasonMakeCreditCardPrimarySuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return makeCardPrimaryWithRequestBuilder(makeCreditCardPrimaryRequestBody: makeCreditCardPrimaryRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shopitem/makeCardPrimary
     - parameter makeCreditCardPrimaryRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrMakeCreditCardPrimaryFailedReasonMakeCreditCardPrimarySuccess> 
     */
    open class func makeCardPrimaryWithRequestBuilder(makeCreditCardPrimaryRequestBody: MakeCreditCardPrimaryRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrMakeCreditCardPrimaryFailedReasonMakeCreditCardPrimarySuccess> {
        let localVariablePath = "/shopitem/makeCardPrimary"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: makeCreditCardPrimaryRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrMakeCreditCardPrimaryFailedReasonMakeCreditCardPrimarySuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter markChatRoomAsReadRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func markChatRoomAsRead(markChatRoomAsReadRequestBody: MarkChatRoomAsReadRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrMarkChatRoomAsReadFailedReasonMarkChatRoomAsReadSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return markChatRoomAsReadWithRequestBuilder(markChatRoomAsReadRequestBody: markChatRoomAsReadRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /chat/markChatRoomAsRead
     - parameter markChatRoomAsReadRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrMarkChatRoomAsReadFailedReasonMarkChatRoomAsReadSuccess> 
     */
    open class func markChatRoomAsReadWithRequestBuilder(markChatRoomAsReadRequestBody: MarkChatRoomAsReadRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrMarkChatRoomAsReadFailedReasonMarkChatRoomAsReadSuccess> {
        let localVariablePath = "/chat/markChatRoomAsRead"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: markChatRoomAsReadRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrMarkChatRoomAsReadFailedReasonMarkChatRoomAsReadSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter purchaseShopItemRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purchaseShopItem(purchaseShopItemRequestBody: PurchaseShopItemRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrPurchaseShopItemFailedReasonPurchaseShopItemSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return purchaseShopItemWithRequestBuilder(purchaseShopItemRequestBody: purchaseShopItemRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shopitem/purchaseShopItem
     - parameter purchaseShopItemRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrPurchaseShopItemFailedReasonPurchaseShopItemSuccess> 
     */
    open class func purchaseShopItemWithRequestBuilder(purchaseShopItemRequestBody: PurchaseShopItemRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrPurchaseShopItemFailedReasonPurchaseShopItemSuccess> {
        let localVariablePath = "/shopitem/purchaseShopItem"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: purchaseShopItemRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrPurchaseShopItemFailedReasonPurchaseShopItemSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter readPageOfCommentsByPublishedItemIdRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func readPageOfCommentsByPublishedItemId(readPageOfCommentsByPublishedItemIdRequestBody: ReadPageOfCommentsByPublishedItemIdRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrReadPageOfCommentsByPublishedItemIdFailedReasonReadPageOfCommentsByPublishedItemIdSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return readPageOfCommentsByPublishedItemIdWithRequestBuilder(readPageOfCommentsByPublishedItemIdRequestBody: readPageOfCommentsByPublishedItemIdRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /PublishedItemComment/readPageOfCommentsByPublishedItemId
     - parameter readPageOfCommentsByPublishedItemIdRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrReadPageOfCommentsByPublishedItemIdFailedReasonReadPageOfCommentsByPublishedItemIdSuccess> 
     */
    open class func readPageOfCommentsByPublishedItemIdWithRequestBuilder(readPageOfCommentsByPublishedItemIdRequestBody: ReadPageOfCommentsByPublishedItemIdRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrReadPageOfCommentsByPublishedItemIdFailedReasonReadPageOfCommentsByPublishedItemIdSuccess> {
        let localVariablePath = "/PublishedItemComment/readPageOfCommentsByPublishedItemId"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: readPageOfCommentsByPublishedItemIdRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrReadPageOfCommentsByPublishedItemIdFailedReasonReadPageOfCommentsByPublishedItemIdSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func refreshAccessToken(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherAuthFailedReasonAuthSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return refreshAccessTokenWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /auth/refresh-access-token
     - returns: RequestBuilder<EitherAuthFailedReasonAuthSuccess> 
     */
    open class func refreshAccessTokenWithRequestBuilder() -> RequestBuilder<EitherAuthFailedReasonAuthSuccess> {
        let localVariablePath = "/auth/refresh-access-token"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherAuthFailedReasonAuthSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter registerUserRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func registerUser(registerUserRequestBody: RegisterUserRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrRegisterUserFailedReasonAuthSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return registerUserWithRequestBuilder(registerUserRequestBody: registerUserRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/register
     - parameter registerUserRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrRegisterUserFailedReasonAuthSuccess> 
     */
    open class func registerUserWithRequestBuilder(registerUserRequestBody: RegisterUserRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrRegisterUserFailedReasonAuthSuccess> {
        let localVariablePath = "/auth/register"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registerUserRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrRegisterUserFailedReasonAuthSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter removeCreditCardRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeCreditCard(removeCreditCardRequestBody: RemoveCreditCardRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrRemoveCreditCardFailedReasonRemoveCreditCardSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return removeCreditCardWithRequestBuilder(removeCreditCardRequestBody: removeCreditCardRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /shopitem/removeCreditCard
     - parameter removeCreditCardRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrRemoveCreditCardFailedReasonRemoveCreditCardSuccess> 
     */
    open class func removeCreditCardWithRequestBuilder(removeCreditCardRequestBody: RemoveCreditCardRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrRemoveCreditCardFailedReasonRemoveCreditCardSuccess> {
        let localVariablePath = "/shopitem/removeCreditCard"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: removeCreditCardRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrRemoveCreditCardFailedReasonRemoveCreditCardSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter removeModeratorFromPublishingChannelRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeModeratorFromPublishingChannel(removeModeratorFromPublishingChannelRequestBody: RemoveModeratorFromPublishingChannelRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrRemoveModeratorFromPublishingChannelFailedReasonRemoveModeratorFromPublishingChannelSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return removeModeratorFromPublishingChannelWithRequestBuilder(removeModeratorFromPublishingChannelRequestBody: removeModeratorFromPublishingChannelRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/removeModeratorFromPublishingChannel
     - parameter removeModeratorFromPublishingChannelRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrRemoveModeratorFromPublishingChannelFailedReasonRemoveModeratorFromPublishingChannelSuccess> 
     */
    open class func removeModeratorFromPublishingChannelWithRequestBuilder(removeModeratorFromPublishingChannelRequestBody: RemoveModeratorFromPublishingChannelRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrRemoveModeratorFromPublishingChannelFailedReasonRemoveModeratorFromPublishingChannelSuccess> {
        let localVariablePath = "/publishing_channel/removeModeratorFromPublishingChannel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: removeModeratorFromPublishingChannelRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrRemoveModeratorFromPublishingChannelFailedReasonRemoveModeratorFromPublishingChannelSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter removeUserLikeFromPublishedItemRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeUserLikeFromPublishedItem(removeUserLikeFromPublishedItemRequestBody: RemoveUserLikeFromPublishedItemRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrRemoveUserLikeFromPublishedItemFailedReasonRemoveUserLikeFromPublishedItemSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return removeUserLikeFromPublishedItemWithRequestBuilder(removeUserLikeFromPublishedItemRequestBody: removeUserLikeFromPublishedItemRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /publishedItemInteractions/removeUserLikeFromPublishedItem
     - parameter removeUserLikeFromPublishedItemRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrRemoveUserLikeFromPublishedItemFailedReasonRemoveUserLikeFromPublishedItemSuccess> 
     */
    open class func removeUserLikeFromPublishedItemWithRequestBuilder(removeUserLikeFromPublishedItemRequestBody: RemoveUserLikeFromPublishedItemRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrRemoveUserLikeFromPublishedItemFailedReasonRemoveUserLikeFromPublishedItemSuccess> {
        let localVariablePath = "/publishedItemInteractions/removeUserLikeFromPublishedItem"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: removeUserLikeFromPublishedItemRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrRemoveUserLikeFromPublishedItemFailedReasonRemoveUserLikeFromPublishedItemSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter resetPasswordRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func resetPassword(resetPasswordRequestBody: ResetPasswordRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrResetPasswordFailedReasonResetPasswordSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return resetPasswordWithRequestBuilder(resetPasswordRequestBody: resetPasswordRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/resetPassword
     - parameter resetPasswordRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrResetPasswordFailedReasonResetPasswordSuccess> 
     */
    open class func resetPasswordWithRequestBuilder(resetPasswordRequestBody: ResetPasswordRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrResetPasswordFailedReasonResetPasswordSuccess> {
        let localVariablePath = "/auth/resetPassword"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: resetPasswordRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrResetPasswordFailedReasonResetPasswordSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter resolveAllFollowRequestsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func resolveAllFollowRequests(resolveAllFollowRequestsRequestBody: ResolveAllFollowRequestsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrResolveAllFollowRequestsFailedReasonResolveAllFollowRequestsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return resolveAllFollowRequestsWithRequestBuilder(resolveAllFollowRequestsRequestBody: resolveAllFollowRequestsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /userInteractions/resolveAllFollowRequests
     - parameter resolveAllFollowRequestsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrResolveAllFollowRequestsFailedReasonResolveAllFollowRequestsSuccess> 
     */
    open class func resolveAllFollowRequestsWithRequestBuilder(resolveAllFollowRequestsRequestBody: ResolveAllFollowRequestsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrResolveAllFollowRequestsFailedReasonResolveAllFollowRequestsSuccess> {
        let localVariablePath = "/userInteractions/resolveAllFollowRequests"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: resolveAllFollowRequestsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrResolveAllFollowRequestsFailedReasonResolveAllFollowRequestsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter resolveFollowRequestRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func resolveFollowRequest(resolveFollowRequestRequestBody: ResolveFollowRequestRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrResolveFollowRequestFailedReasonResolveFollowRequestSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return resolveFollowRequestWithRequestBuilder(resolveFollowRequestRequestBody: resolveFollowRequestRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /userInteractions/resolveFollowRequest
     - parameter resolveFollowRequestRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrResolveFollowRequestFailedReasonResolveFollowRequestSuccess> 
     */
    open class func resolveFollowRequestWithRequestBuilder(resolveFollowRequestRequestBody: ResolveFollowRequestRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrResolveFollowRequestFailedReasonResolveFollowRequestSuccess> {
        let localVariablePath = "/userInteractions/resolveFollowRequest"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: resolveFollowRequestRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrResolveFollowRequestFailedReasonResolveFollowRequestSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter resolvePublishingChannelSubmissionRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func resolvePublishingChannelSubmission(resolvePublishingChannelSubmissionRequestBody: ResolvePublishingChannelSubmissionRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrResolvePublishingChannelSubmissionFailedReasonResolvePublishingChannelSubmissionSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return resolvePublishingChannelSubmissionWithRequestBuilder(resolvePublishingChannelSubmissionRequestBody: resolvePublishingChannelSubmissionRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/resolvePublishingChannelSubmission
     - parameter resolvePublishingChannelSubmissionRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrResolvePublishingChannelSubmissionFailedReasonResolvePublishingChannelSubmissionSuccess> 
     */
    open class func resolvePublishingChannelSubmissionWithRequestBuilder(resolvePublishingChannelSubmissionRequestBody: ResolvePublishingChannelSubmissionRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrResolvePublishingChannelSubmissionFailedReasonResolvePublishingChannelSubmissionSuccess> {
        let localVariablePath = "/publishing_channel/resolvePublishingChannelSubmission"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: resolvePublishingChannelSubmissionRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrResolvePublishingChannelSubmissionFailedReasonResolvePublishingChannelSubmissionSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter revokeFollowerRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func revokeFollower(revokeFollowerRequestBody: RevokeFollowerRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrRevokeFollowerFailedReasonRevokeFollowerSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return revokeFollowerWithRequestBuilder(revokeFollowerRequestBody: revokeFollowerRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /userInteractions/revokeFollower
     - parameter revokeFollowerRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrRevokeFollowerFailedReasonRevokeFollowerSuccess> 
     */
    open class func revokeFollowerWithRequestBuilder(revokeFollowerRequestBody: RevokeFollowerRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrRevokeFollowerFailedReasonRevokeFollowerSuccess> {
        let localVariablePath = "/userInteractions/revokeFollower"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: revokeFollowerRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrRevokeFollowerFailedReasonRevokeFollowerSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter searchForHashtagsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchForHashtags(searchForHashtagsRequestBody: SearchForHashtagsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrSearchForHashtagsFailedReasonSearchForHashtagsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return searchForHashtagsWithRequestBuilder(searchForHashtagsRequestBody: searchForHashtagsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /discover/searchForHashtags
     - parameter searchForHashtagsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrSearchForHashtagsFailedReasonSearchForHashtagsSuccess> 
     */
    open class func searchForHashtagsWithRequestBuilder(searchForHashtagsRequestBody: SearchForHashtagsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrSearchForHashtagsFailedReasonSearchForHashtagsSuccess> {
        let localVariablePath = "/discover/searchForHashtags"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: searchForHashtagsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrSearchForHashtagsFailedReasonSearchForHashtagsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter searchForPostsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchForPosts(searchForPostsRequestBody: SearchForPostsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrSearchForPostsFailedReasonSearchForPostsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return searchForPostsWithRequestBuilder(searchForPostsRequestBody: searchForPostsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /discover/searchForPosts
     - parameter searchForPostsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrSearchForPostsFailedReasonSearchForPostsSuccess> 
     */
    open class func searchForPostsWithRequestBuilder(searchForPostsRequestBody: SearchForPostsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrSearchForPostsFailedReasonSearchForPostsSuccess> {
        let localVariablePath = "/discover/searchForPosts"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: searchForPostsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrSearchForPostsFailedReasonSearchForPostsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter searchForPublishingChannelsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchForPublishingChannels(searchForPublishingChannelsRequestBody: SearchForPublishingChannelsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrSearchForPublishingChannelsFailedReasonSearchForPublishingChannelsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return searchForPublishingChannelsWithRequestBuilder(searchForPublishingChannelsRequestBody: searchForPublishingChannelsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /discover/searchForPublishingChannels
     - parameter searchForPublishingChannelsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrSearchForPublishingChannelsFailedReasonSearchForPublishingChannelsSuccess> 
     */
    open class func searchForPublishingChannelsWithRequestBuilder(searchForPublishingChannelsRequestBody: SearchForPublishingChannelsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrSearchForPublishingChannelsFailedReasonSearchForPublishingChannelsSuccess> {
        let localVariablePath = "/discover/searchForPublishingChannels"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: searchForPublishingChannelsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrSearchForPublishingChannelsFailedReasonSearchForPublishingChannelsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter searchForUsersRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchForUsers(searchForUsersRequestBody: SearchForUsersRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrSearchForUsersFailedReasonSearchForUsersSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return searchForUsersWithRequestBuilder(searchForUsersRequestBody: searchForUsersRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /discover/searchForUsers
     - parameter searchForUsersRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrSearchForUsersFailedReasonSearchForUsersSuccess> 
     */
    open class func searchForUsersWithRequestBuilder(searchForUsersRequestBody: SearchForUsersRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrSearchForUsersFailedReasonSearchForUsersSuccess> {
        let localVariablePath = "/discover/searchForUsers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: searchForUsersRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrSearchForUsersFailedReasonSearchForUsersSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter searchUserProfilesByUsernameRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchUserProfilesByUsername(searchUserProfilesByUsernameRequestBody: SearchUserProfilesByUsernameRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrSearchUserProfilesByUsernameFailedReasonSearchUserProfilesByUsernameSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return searchUserProfilesByUsernameWithRequestBuilder(searchUserProfilesByUsernameRequestBody: searchUserProfilesByUsernameRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /user/SearchUserProfilesByUsername
     - parameter searchUserProfilesByUsernameRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrSearchUserProfilesByUsernameFailedReasonSearchUserProfilesByUsernameSuccess> 
     */
    open class func searchUserProfilesByUsernameWithRequestBuilder(searchUserProfilesByUsernameRequestBody: SearchUserProfilesByUsernameRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrSearchUserProfilesByUsernameFailedReasonSearchUserProfilesByUsernameSuccess> {
        let localVariablePath = "/user/SearchUserProfilesByUsername"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: searchUserProfilesByUsernameRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrSearchUserProfilesByUsernameFailedReasonSearchUserProfilesByUsernameSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter sendDataTypesToFrontend1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sendDataTypesToFrontend1(sendDataTypesToFrontend1Request: SendDataTypesToFrontend1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SendDataTypesToFrontend1200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return sendDataTypesToFrontend1WithRequestBuilder(sendDataTypesToFrontend1Request: sendDataTypesToFrontend1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /utilities/sendDataTypesToFrontend1
     - parameter sendDataTypesToFrontend1Request: (body)  
     - returns: RequestBuilder<SendDataTypesToFrontend1200Response> 
     */
    open class func sendDataTypesToFrontend1WithRequestBuilder(sendDataTypesToFrontend1Request: SendDataTypesToFrontend1Request) -> RequestBuilder<SendDataTypesToFrontend1200Response> {
        let localVariablePath = "/utilities/sendDataTypesToFrontend1"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendDataTypesToFrontend1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SendDataTypesToFrontend1200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter setUserContentFeedFiltersRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setUserContentFeedFilters(setUserContentFeedFiltersRequestBody: SetUserContentFeedFiltersRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrSetUserContentFeedFiltersFailedReasonSetUserContentFeedFiltersSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return setUserContentFeedFiltersWithRequestBuilder(setUserContentFeedFiltersRequestBody: setUserContentFeedFiltersRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /feed/setUserContentFeedFilters
     - parameter setUserContentFeedFiltersRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrSetUserContentFeedFiltersFailedReasonSetUserContentFeedFiltersSuccess> 
     */
    open class func setUserContentFeedFiltersWithRequestBuilder(setUserContentFeedFiltersRequestBody: SetUserContentFeedFiltersRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrSetUserContentFeedFiltersFailedReasonSetUserContentFeedFiltersSuccess> {
        let localVariablePath = "/feed/setUserContentFeedFilters"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setUserContentFeedFiltersRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrSetUserContentFeedFiltersFailedReasonSetUserContentFeedFiltersSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter setUserHashtagsRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setUserHashtags(setUserHashtagsRequestBody: SetUserHashtagsRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrSetUserHashtagsFailedReasonSetUserHashtagsSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return setUserHashtagsWithRequestBuilder(setUserHashtagsRequestBody: setUserHashtagsRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /user/SetUserHashtags
     - parameter setUserHashtagsRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrSetUserHashtagsFailedReasonSetUserHashtagsSuccess> 
     */
    open class func setUserHashtagsWithRequestBuilder(setUserHashtagsRequestBody: SetUserHashtagsRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrSetUserHashtagsFailedReasonSetUserHashtagsSuccess> {
        let localVariablePath = "/user/SetUserHashtags"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setUserHashtagsRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrSetUserHashtagsFailedReasonSetUserHashtagsSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter sharePostRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sharePost(sharePostRequestBody: SharePostRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrSharePostFailedReasonSharePostSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return sharePostWithRequestBuilder(sharePostRequestBody: sharePostRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /post/sharePost
     - parameter sharePostRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrSharePostFailedReasonSharePostSuccess> 
     */
    open class func sharePostWithRequestBuilder(sharePostRequestBody: SharePostRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrSharePostFailedReasonSharePostSuccess> {
        let localVariablePath = "/post/sharePost"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sharePostRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrSharePostFailedReasonSharePostSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter storeCreditCardRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storeCreditCard(storeCreditCardRequestBody: StoreCreditCardRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrStoreCreditCardFailedReasonStoreCreditCardSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return storeCreditCardWithRequestBuilder(storeCreditCardRequestBody: storeCreditCardRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shopitem/storeCreditCard
     - parameter storeCreditCardRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrStoreCreditCardFailedReasonStoreCreditCardSuccess> 
     */
    open class func storeCreditCardWithRequestBuilder(storeCreditCardRequestBody: StoreCreditCardRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrStoreCreditCardFailedReasonStoreCreditCardSuccess> {
        let localVariablePath = "/shopitem/storeCreditCard"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: storeCreditCardRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrStoreCreditCardFailedReasonStoreCreditCardSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter submitPublishedItemToPublishingChannelRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func submitPublishedItemToPublishingChannel(submitPublishedItemToPublishingChannelRequestBody: SubmitPublishedItemToPublishingChannelRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrSubmitPublishedItemToPublishingChannelFailedReasonSubmitPublishedItemToPublishingChannelSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return submitPublishedItemToPublishingChannelWithRequestBuilder(submitPublishedItemToPublishingChannelRequestBody: submitPublishedItemToPublishingChannelRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/submitPublishedItemToPublishingChannel
     - parameter submitPublishedItemToPublishingChannelRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrSubmitPublishedItemToPublishingChannelFailedReasonSubmitPublishedItemToPublishingChannelSuccess> 
     */
    open class func submitPublishedItemToPublishingChannelWithRequestBuilder(submitPublishedItemToPublishingChannelRequestBody: SubmitPublishedItemToPublishingChannelRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrSubmitPublishedItemToPublishingChannelFailedReasonSubmitPublishedItemToPublishingChannelSuccess> {
        let localVariablePath = "/publishing_channel/submitPublishedItemToPublishingChannel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: submitPublishedItemToPublishingChannelRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrSubmitPublishedItemToPublishingChannelFailedReasonSubmitPublishedItemToPublishingChannelSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter unblockUserRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func unblockUser(unblockUserRequestBody: UnblockUserRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUnblockUserFailedReasonUnblockUserSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return unblockUserWithRequestBuilder(unblockUserRequestBody: unblockUserRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /userInteractions/unblockUser
     - parameter unblockUserRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUnblockUserFailedReasonUnblockUserSuccess> 
     */
    open class func unblockUserWithRequestBuilder(unblockUserRequestBody: UnblockUserRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUnblockUserFailedReasonUnblockUserSuccess> {
        let localVariablePath = "/userInteractions/unblockUser"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: unblockUserRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUnblockUserFailedReasonUnblockUserSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter undoBanUserFromPublishingChannelRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func undoBanUserFromPublishingChannel(undoBanUserFromPublishingChannelRequestBody: UndoBanUserFromPublishingChannelRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUndoBanUserFromPublishingChannelFailedReasonUndoBanUserFromPublishingChannelSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return undoBanUserFromPublishingChannelWithRequestBuilder(undoBanUserFromPublishingChannelRequestBody: undoBanUserFromPublishingChannelRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/undoBanUserFromPublishingChannel
     - parameter undoBanUserFromPublishingChannelRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUndoBanUserFromPublishingChannelFailedReasonUndoBanUserFromPublishingChannelSuccess> 
     */
    open class func undoBanUserFromPublishingChannelWithRequestBuilder(undoBanUserFromPublishingChannelRequestBody: UndoBanUserFromPublishingChannelRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUndoBanUserFromPublishingChannelFailedReasonUndoBanUserFromPublishingChannelSuccess> {
        let localVariablePath = "/publishing_channel/undoBanUserFromPublishingChannel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: undoBanUserFromPublishingChannelRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUndoBanUserFromPublishingChannelFailedReasonUndoBanUserFromPublishingChannelSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter unfollowPublishingChannelRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func unfollowPublishingChannel(unfollowPublishingChannelRequestBody: UnfollowPublishingChannelRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUnfollowPublishingChannelFailedReasonUnfollowPublishingChannelSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return unfollowPublishingChannelWithRequestBuilder(unfollowPublishingChannelRequestBody: unfollowPublishingChannelRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/unfollowPublishingChannel
     - parameter unfollowPublishingChannelRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUnfollowPublishingChannelFailedReasonUnfollowPublishingChannelSuccess> 
     */
    open class func unfollowPublishingChannelWithRequestBuilder(unfollowPublishingChannelRequestBody: UnfollowPublishingChannelRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUnfollowPublishingChannelFailedReasonUnfollowPublishingChannelSuccess> {
        let localVariablePath = "/publishing_channel/unfollowPublishingChannel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: unfollowPublishingChannelRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUnfollowPublishingChannelFailedReasonUnfollowPublishingChannelSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter unfollowUserRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func unfollowUser(unfollowUserRequestBody: UnfollowUserRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUnfollowUserFailedReasonUnfollowUserSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return unfollowUserWithRequestBuilder(unfollowUserRequestBody: unfollowUserRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /userInteractions/unfollowUser
     - parameter unfollowUserRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUnfollowUserFailedReasonUnfollowUserSuccess> 
     */
    open class func unfollowUserWithRequestBuilder(unfollowUserRequestBody: UnfollowUserRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUnfollowUserFailedReasonUnfollowUserSuccess> {
        let localVariablePath = "/userInteractions/unfollowUser"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: unfollowUserRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUnfollowUserFailedReasonUnfollowUserSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter updatePasswordRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updatePassword(updatePasswordRequestBody: UpdatePasswordRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUpdatePasswordFailedReasonUpdatePasswordSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return updatePasswordWithRequestBuilder(updatePasswordRequestBody: updatePasswordRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/updatePassword
     - parameter updatePasswordRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUpdatePasswordFailedReasonUpdatePasswordSuccess> 
     */
    open class func updatePasswordWithRequestBuilder(updatePasswordRequestBody: UpdatePasswordRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUpdatePasswordFailedReasonUpdatePasswordSuccess> {
        let localVariablePath = "/auth/updatePassword"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updatePasswordRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUpdatePasswordFailedReasonUpdatePasswordSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter updatePostRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updatePost(updatePostRequestBody: UpdatePostRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUpdatePostFailedReasonUpdatePostSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return updatePostWithRequestBuilder(updatePostRequestBody: updatePostRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /post/updatePost
     - parameter updatePostRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUpdatePostFailedReasonUpdatePostSuccess> 
     */
    open class func updatePostWithRequestBuilder(updatePostRequestBody: UpdatePostRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUpdatePostFailedReasonUpdatePostSuccess> {
        let localVariablePath = "/post/updatePost"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updatePostRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUpdatePostFailedReasonUpdatePostSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter updatePublishingChannelRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updatePublishingChannel(updatePublishingChannelRequestBody: UpdatePublishingChannelRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUpdatePublishingChannelFailedReasonUpdatePublishingChannelSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return updatePublishingChannelWithRequestBuilder(updatePublishingChannelRequestBody: updatePublishingChannelRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/updatePublishingChannel
     - parameter updatePublishingChannelRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUpdatePublishingChannelFailedReasonUpdatePublishingChannelSuccess> 
     */
    open class func updatePublishingChannelWithRequestBuilder(updatePublishingChannelRequestBody: UpdatePublishingChannelRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUpdatePublishingChannelFailedReasonUpdatePublishingChannelSuccess> {
        let localVariablePath = "/publishing_channel/updatePublishingChannel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updatePublishingChannelRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUpdatePublishingChannelFailedReasonUpdatePublishingChannelSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter updatePublishingChannelBackgroundImageRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updatePublishingChannelBackgroundImage(updatePublishingChannelBackgroundImageRequestBody: UpdatePublishingChannelBackgroundImageRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUpdatePublishingChannelBackgroundImageFailedReasonUpdatePublishingChannelBackgroundImageSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return updatePublishingChannelBackgroundImageWithRequestBuilder(updatePublishingChannelBackgroundImageRequestBody: updatePublishingChannelBackgroundImageRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/updatePublishingChannelBackgroundImage
     - parameter updatePublishingChannelBackgroundImageRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUpdatePublishingChannelBackgroundImageFailedReasonUpdatePublishingChannelBackgroundImageSuccess> 
     */
    open class func updatePublishingChannelBackgroundImageWithRequestBuilder(updatePublishingChannelBackgroundImageRequestBody: UpdatePublishingChannelBackgroundImageRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUpdatePublishingChannelBackgroundImageFailedReasonUpdatePublishingChannelBackgroundImageSuccess> {
        let localVariablePath = "/publishing_channel/updatePublishingChannelBackgroundImage"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updatePublishingChannelBackgroundImageRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUpdatePublishingChannelBackgroundImageFailedReasonUpdatePublishingChannelBackgroundImageSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter updatePublishingChannelProfilePictureRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updatePublishingChannelProfilePicture(updatePublishingChannelProfilePictureRequestBody: UpdatePublishingChannelProfilePictureRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUpdatePublishingChannelProfilePictureFailedReasonUpdatePublishingChannelProfilePictureSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return updatePublishingChannelProfilePictureWithRequestBuilder(updatePublishingChannelProfilePictureRequestBody: updatePublishingChannelProfilePictureRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishing_channel/updatePublishingChannelProfilePicture
     - parameter updatePublishingChannelProfilePictureRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUpdatePublishingChannelProfilePictureFailedReasonUpdatePublishingChannelProfilePictureSuccess> 
     */
    open class func updatePublishingChannelProfilePictureWithRequestBuilder(updatePublishingChannelProfilePictureRequestBody: UpdatePublishingChannelProfilePictureRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUpdatePublishingChannelProfilePictureFailedReasonUpdatePublishingChannelProfilePictureSuccess> {
        let localVariablePath = "/publishing_channel/updatePublishingChannelProfilePicture"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updatePublishingChannelProfilePictureRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUpdatePublishingChannelProfilePictureFailedReasonUpdatePublishingChannelProfilePictureSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter updateShopItemRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateShopItem(updateShopItemRequestBody: UpdateShopItemRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUpdateShopItemFailedReasonUpdateShopItemSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return updateShopItemWithRequestBuilder(updateShopItemRequestBody: updateShopItemRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /shopitem/update
     - parameter updateShopItemRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUpdateShopItemFailedReasonUpdateShopItemSuccess> 
     */
    open class func updateShopItemWithRequestBuilder(updateShopItemRequestBody: UpdateShopItemRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUpdateShopItemFailedReasonUpdateShopItemSuccess> {
        let localVariablePath = "/shopitem/update"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateShopItemRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUpdateShopItemFailedReasonUpdateShopItemSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter updateUserBackgroundImageRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateUserBackgroundImage(updateUserBackgroundImageRequestBody: UpdateUserBackgroundImageRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUpdateUserBackgroundImageFailedReasonUpdateUserBackgroundImageSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return updateUserBackgroundImageWithRequestBuilder(updateUserBackgroundImageRequestBody: updateUserBackgroundImageRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /user/UpdateUserBackgroundImage
     - parameter updateUserBackgroundImageRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUpdateUserBackgroundImageFailedReasonUpdateUserBackgroundImageSuccess> 
     */
    open class func updateUserBackgroundImageWithRequestBuilder(updateUserBackgroundImageRequestBody: UpdateUserBackgroundImageRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUpdateUserBackgroundImageFailedReasonUpdateUserBackgroundImageSuccess> {
        let localVariablePath = "/user/UpdateUserBackgroundImage"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUserBackgroundImageRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUpdateUserBackgroundImageFailedReasonUpdateUserBackgroundImageSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter updateUserProfileRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateUserProfile(updateUserProfileRequestBody: UpdateUserProfileRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUpdateUserProfileFailedReasonUpdateUserProfileSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return updateUserProfileWithRequestBuilder(updateUserProfileRequestBody: updateUserProfileRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /user/UpdateUserProfile
     - parameter updateUserProfileRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUpdateUserProfileFailedReasonUpdateUserProfileSuccess> 
     */
    open class func updateUserProfileWithRequestBuilder(updateUserProfileRequestBody: UpdateUserProfileRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUpdateUserProfileFailedReasonUpdateUserProfileSuccess> {
        let localVariablePath = "/user/UpdateUserProfile"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUserProfileRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUpdateUserProfileFailedReasonUpdateUserProfileSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter updateUserProfilePictureRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateUserProfilePicture(updateUserProfilePictureRequestBody: UpdateUserProfilePictureRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUpdateUserProfilePictureFailedReasonUpdateUserProfilePictureSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return updateUserProfilePictureWithRequestBuilder(updateUserProfilePictureRequestBody: updateUserProfilePictureRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /user/UpdateUserProfilePicture
     - parameter updateUserProfilePictureRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUpdateUserProfilePictureFailedReasonUpdateUserProfilePictureSuccess> 
     */
    open class func updateUserProfilePictureWithRequestBuilder(updateUserProfilePictureRequestBody: UpdateUserProfilePictureRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUpdateUserProfilePictureFailedReasonUpdateUserProfilePictureSuccess> {
        let localVariablePath = "/user/UpdateUserProfilePicture"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUserProfilePictureRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUpdateUserProfilePictureFailedReasonUpdateUserProfilePictureSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter mediaFile: (form)  
     - parameter mimeType: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func uploadFile(mediaFile: URL, mimeType: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUploadFileFailedReasonUploadFileSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return uploadFileWithRequestBuilder(mediaFile: mediaFile, mimeType: mimeType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /file_upload/uploadFile
     - parameter mediaFile: (form)  
     - parameter mimeType: (form)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUploadFileFailedReasonUploadFileSuccess> 
     */
    open class func uploadFileWithRequestBuilder(mediaFile: URL, mimeType: String) -> RequestBuilder<EitherErrorReasonTypesStringOrUploadFileFailedReasonUploadFileSuccess> {
        let localVariablePath = "/file_upload/uploadFile"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "mediaFile": mediaFile.encodeToJSON(),
            "mimeType": mimeType.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUploadFileFailedReasonUploadFileSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter userLikesPublishedItemRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLikesPublishedItem(userLikesPublishedItemRequestBody: UserLikesPublishedItemRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUserLikesPublishedItemFailedReasonUserLikesPublishedItemSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return userLikesPublishedItemWithRequestBuilder(userLikesPublishedItemRequestBody: userLikesPublishedItemRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishedItemInteractions/userLikesPublishedItem
     - parameter userLikesPublishedItemRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUserLikesPublishedItemFailedReasonUserLikesPublishedItemSuccess> 
     */
    open class func userLikesPublishedItemWithRequestBuilder(userLikesPublishedItemRequestBody: UserLikesPublishedItemRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUserLikesPublishedItemFailedReasonUserLikesPublishedItemSuccess> {
        let localVariablePath = "/publishedItemInteractions/userLikesPublishedItem"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userLikesPublishedItemRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUserLikesPublishedItemFailedReasonUserLikesPublishedItemSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter userSavesPublishedItemRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userSavesPublishedItem(userSavesPublishedItemRequestBody: UserSavesPublishedItemRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUserSavesPublishedItemFailedReasonUserSavesPublishedItemSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return userSavesPublishedItemWithRequestBuilder(userSavesPublishedItemRequestBody: userSavesPublishedItemRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /publishedItemInteractions/userSavesPublishedItem
     - parameter userSavesPublishedItemRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUserSavesPublishedItemFailedReasonUserSavesPublishedItemSuccess> 
     */
    open class func userSavesPublishedItemWithRequestBuilder(userSavesPublishedItemRequestBody: UserSavesPublishedItemRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUserSavesPublishedItemFailedReasonUserSavesPublishedItemSuccess> {
        let localVariablePath = "/publishedItemInteractions/userSavesPublishedItem"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userSavesPublishedItemRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUserSavesPublishedItemFailedReasonUserSavesPublishedItemSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter removeUserLikeFromPublishedItemRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userUnsavesPublishedItem(removeUserLikeFromPublishedItemRequestBody: RemoveUserLikeFromPublishedItemRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrUserUnsavesPublishedItemFailedReasonUserUnsavesPublishedItemSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return userUnsavesPublishedItemWithRequestBuilder(removeUserLikeFromPublishedItemRequestBody: removeUserLikeFromPublishedItemRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /publishedItemInteractions/userUnsavesPublishedItem
     - parameter removeUserLikeFromPublishedItemRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrUserUnsavesPublishedItemFailedReasonUserUnsavesPublishedItemSuccess> 
     */
    open class func userUnsavesPublishedItemWithRequestBuilder(removeUserLikeFromPublishedItemRequestBody: RemoveUserLikeFromPublishedItemRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrUserUnsavesPublishedItemFailedReasonUserUnsavesPublishedItemSuccess> {
        let localVariablePath = "/publishedItemInteractions/userUnsavesPublishedItem"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: removeUserLikeFromPublishedItemRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrUserUnsavesPublishedItemFailedReasonUserUnsavesPublishedItemSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter verifyUserEmailRequestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func verifyUserEmail(verifyUserEmailRequestBody: VerifyUserEmailRequestBody, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EitherErrorReasonTypesStringOrVerifyUserEmailFailedReasonVerifyUserEmailSuccess?, _ error: Error?) -> Void)) -> RequestTask {
        return verifyUserEmailWithRequestBuilder(verifyUserEmailRequestBody: verifyUserEmailRequestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /auth/verifyUserEmail
     - parameter verifyUserEmailRequestBody: (body)  
     - returns: RequestBuilder<EitherErrorReasonTypesStringOrVerifyUserEmailFailedReasonVerifyUserEmailSuccess> 
     */
    open class func verifyUserEmailWithRequestBuilder(verifyUserEmailRequestBody: VerifyUserEmailRequestBody) -> RequestBuilder<EitherErrorReasonTypesStringOrVerifyUserEmailFailedReasonVerifyUserEmailSuccess> {
        let localVariablePath = "/auth/verifyUserEmail"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: verifyUserEmailRequestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EitherErrorReasonTypesStringOrVerifyUserEmailFailedReasonVerifyUserEmailSuccess>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
