//
// RenderableUserNotification.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RenderableUserNotification: Codable, JSONEncodable, Hashable {

    public var type: NOTIFICATIONEVENTSSHOPITEMSOLD
    public var countOfUnreadNotifications: Double
    public var eventTimestamp: Double
    public var timestampSeenByUser: Double?
    public var userAcceptingFollowRequest: RenderableUser
    public var userDoingFollowing: RenderableUser
    public var followRequestingUser: RenderableUser
    public var userThatCommented: RenderableUser
    public var publishedItem: RenderablePublishedItem
    public var publishedItemComment: RenderablePublishedItemComment
    public var userThatLikedPublishedItem: RenderableUser
    public var userSharingPublishedItem: RenderableUser
    public var sourcePublishedItem: RenderablePublishedItem
    public var newPublishedItemId: String
    public var userTaggingClient: RenderableUser
    public var publishingChannel: RenderablePublishingChannel
    public var rejectionSummary: RenderableRejectedPublishingChannelSubmissionNotificationRejectionSummary
    public var userSendingInvitation: RenderableUser
    public var purchaser: RenderableUser
    public var shopItem: RenderableShopItem

    public init(type: NOTIFICATIONEVENTSSHOPITEMSOLD, countOfUnreadNotifications: Double, eventTimestamp: Double, timestampSeenByUser: Double? = nil, userAcceptingFollowRequest: RenderableUser, userDoingFollowing: RenderableUser, followRequestingUser: RenderableUser, userThatCommented: RenderableUser, publishedItem: RenderablePublishedItem, publishedItemComment: RenderablePublishedItemComment, userThatLikedPublishedItem: RenderableUser, userSharingPublishedItem: RenderableUser, sourcePublishedItem: RenderablePublishedItem, newPublishedItemId: String, userTaggingClient: RenderableUser, publishingChannel: RenderablePublishingChannel, rejectionSummary: RenderableRejectedPublishingChannelSubmissionNotificationRejectionSummary, userSendingInvitation: RenderableUser, purchaser: RenderableUser, shopItem: RenderableShopItem) {
        self.type = type
        self.countOfUnreadNotifications = countOfUnreadNotifications
        self.eventTimestamp = eventTimestamp
        self.timestampSeenByUser = timestampSeenByUser
        self.userAcceptingFollowRequest = userAcceptingFollowRequest
        self.userDoingFollowing = userDoingFollowing
        self.followRequestingUser = followRequestingUser
        self.userThatCommented = userThatCommented
        self.publishedItem = publishedItem
        self.publishedItemComment = publishedItemComment
        self.userThatLikedPublishedItem = userThatLikedPublishedItem
        self.userSharingPublishedItem = userSharingPublishedItem
        self.sourcePublishedItem = sourcePublishedItem
        self.newPublishedItemId = newPublishedItemId
        self.userTaggingClient = userTaggingClient
        self.publishingChannel = publishingChannel
        self.rejectionSummary = rejectionSummary
        self.userSendingInvitation = userSendingInvitation
        self.purchaser = purchaser
        self.shopItem = shopItem
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case countOfUnreadNotifications
        case eventTimestamp
        case timestampSeenByUser
        case userAcceptingFollowRequest
        case userDoingFollowing
        case followRequestingUser
        case userThatCommented
        case publishedItem
        case publishedItemComment
        case userThatLikedPublishedItem
        case userSharingPublishedItem
        case sourcePublishedItem
        case newPublishedItemId
        case userTaggingClient
        case publishingChannel
        case rejectionSummary
        case userSendingInvitation
        case purchaser
        case shopItem
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(countOfUnreadNotifications, forKey: .countOfUnreadNotifications)
        try container.encode(eventTimestamp, forKey: .eventTimestamp)
        try container.encodeIfPresent(timestampSeenByUser, forKey: .timestampSeenByUser)
        try container.encode(userAcceptingFollowRequest, forKey: .userAcceptingFollowRequest)
        try container.encode(userDoingFollowing, forKey: .userDoingFollowing)
        try container.encode(followRequestingUser, forKey: .followRequestingUser)
        try container.encode(userThatCommented, forKey: .userThatCommented)
        try container.encode(publishedItem, forKey: .publishedItem)
        try container.encode(publishedItemComment, forKey: .publishedItemComment)
        try container.encode(userThatLikedPublishedItem, forKey: .userThatLikedPublishedItem)
        try container.encode(userSharingPublishedItem, forKey: .userSharingPublishedItem)
        try container.encode(sourcePublishedItem, forKey: .sourcePublishedItem)
        try container.encode(newPublishedItemId, forKey: .newPublishedItemId)
        try container.encode(userTaggingClient, forKey: .userTaggingClient)
        try container.encode(publishingChannel, forKey: .publishingChannel)
        try container.encode(rejectionSummary, forKey: .rejectionSummary)
        try container.encode(userSendingInvitation, forKey: .userSendingInvitation)
        try container.encode(purchaser, forKey: .purchaser)
        try container.encode(shopItem, forKey: .shopItem)
    }
}

