//
// RenderableUser.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RenderableUser: Codable, JSONEncodable, Hashable {

    public var userId: String
    public var email: String
    public var username: String
    public var shortBio: String?
    public var userWebsite: String?
    public var phoneNumber: String?
    public var profilePrivacySetting: ProfilePrivacySetting
    public var preferredPagePrimaryColor: Color?
    public var creationTimestamp: Double
    public var isAdmin: Bool
    public var hasVerifiedEmail: Bool
    public var backgroundImageTemporaryUrl: String?
    public var profilePictureTemporaryUrl: String?
    public var followers: RenderableUserFollowers
    public var follows: RenderableUserFollowers
    public var clientCanViewContent: Bool
    public var hashtags: [String]
    public var followingStatusOfClientToUser: FollowingStatus

    public init(userId: String, email: String, username: String, shortBio: String? = nil, userWebsite: String? = nil, phoneNumber: String? = nil, profilePrivacySetting: ProfilePrivacySetting, preferredPagePrimaryColor: Color? = nil, creationTimestamp: Double, isAdmin: Bool, hasVerifiedEmail: Bool, backgroundImageTemporaryUrl: String? = nil, profilePictureTemporaryUrl: String? = nil, followers: RenderableUserFollowers, follows: RenderableUserFollowers, clientCanViewContent: Bool, hashtags: [String], followingStatusOfClientToUser: FollowingStatus) {
        self.userId = userId
        self.email = email
        self.username = username
        self.shortBio = shortBio
        self.userWebsite = userWebsite
        self.phoneNumber = phoneNumber
        self.profilePrivacySetting = profilePrivacySetting
        self.preferredPagePrimaryColor = preferredPagePrimaryColor
        self.creationTimestamp = creationTimestamp
        self.isAdmin = isAdmin
        self.hasVerifiedEmail = hasVerifiedEmail
        self.backgroundImageTemporaryUrl = backgroundImageTemporaryUrl
        self.profilePictureTemporaryUrl = profilePictureTemporaryUrl
        self.followers = followers
        self.follows = follows
        self.clientCanViewContent = clientCanViewContent
        self.hashtags = hashtags
        self.followingStatusOfClientToUser = followingStatusOfClientToUser
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId
        case email
        case username
        case shortBio
        case userWebsite
        case phoneNumber
        case profilePrivacySetting
        case preferredPagePrimaryColor
        case creationTimestamp
        case isAdmin
        case hasVerifiedEmail
        case backgroundImageTemporaryUrl
        case profilePictureTemporaryUrl
        case followers
        case follows
        case clientCanViewContent
        case hashtags
        case followingStatusOfClientToUser
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userId, forKey: .userId)
        try container.encode(email, forKey: .email)
        try container.encode(username, forKey: .username)
        try container.encodeIfPresent(shortBio, forKey: .shortBio)
        try container.encodeIfPresent(userWebsite, forKey: .userWebsite)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encode(profilePrivacySetting, forKey: .profilePrivacySetting)
        try container.encodeIfPresent(preferredPagePrimaryColor, forKey: .preferredPagePrimaryColor)
        try container.encode(creationTimestamp, forKey: .creationTimestamp)
        try container.encode(isAdmin, forKey: .isAdmin)
        try container.encode(hasVerifiedEmail, forKey: .hasVerifiedEmail)
        try container.encodeIfPresent(backgroundImageTemporaryUrl, forKey: .backgroundImageTemporaryUrl)
        try container.encodeIfPresent(profilePictureTemporaryUrl, forKey: .profilePictureTemporaryUrl)
        try container.encode(followers, forKey: .followers)
        try container.encode(follows, forKey: .follows)
        try container.encode(clientCanViewContent, forKey: .clientCanViewContent)
        try container.encode(hashtags, forKey: .hashtags)
        try container.encode(followingStatusOfClientToUser, forKey: .followingStatusOfClientToUser)
    }
}

