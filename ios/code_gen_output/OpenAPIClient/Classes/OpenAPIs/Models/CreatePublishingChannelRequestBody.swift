//
// CreatePublishingChannelRequestBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreatePublishingChannelRequestBody: Codable, JSONEncodable, Hashable {

    public var backgroundImage: FileDescriptor?
    public var profilePicture: FileDescriptor?
    public var publishingChannelName: String
    public var publishingChannelDescription: String
    public var externalUrls: [String]
    public var publishingChannelRules: [String]
    public var bannedWords: [String]
    public var moderatorUserIds: [String]

    public init(backgroundImage: FileDescriptor? = nil, profilePicture: FileDescriptor? = nil, publishingChannelName: String, publishingChannelDescription: String, externalUrls: [String], publishingChannelRules: [String], bannedWords: [String], moderatorUserIds: [String]) {
        self.backgroundImage = backgroundImage
        self.profilePicture = profilePicture
        self.publishingChannelName = publishingChannelName
        self.publishingChannelDescription = publishingChannelDescription
        self.externalUrls = externalUrls
        self.publishingChannelRules = publishingChannelRules
        self.bannedWords = bannedWords
        self.moderatorUserIds = moderatorUserIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case backgroundImage
        case profilePicture
        case publishingChannelName
        case publishingChannelDescription
        case externalUrls
        case publishingChannelRules
        case bannedWords
        case moderatorUserIds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(backgroundImage, forKey: .backgroundImage)
        try container.encodeIfPresent(profilePicture, forKey: .profilePicture)
        try container.encode(publishingChannelName, forKey: .publishingChannelName)
        try container.encode(publishingChannelDescription, forKey: .publishingChannelDescription)
        try container.encode(externalUrls, forKey: .externalUrls)
        try container.encode(publishingChannelRules, forKey: .publishingChannelRules)
        try container.encode(bannedWords, forKey: .bannedWords)
        try container.encode(moderatorUserIds, forKey: .moderatorUserIds)
    }
}

