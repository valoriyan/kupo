//
// RenderablePublishingChannel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RenderablePublishingChannel: Codable, JSONEncodable, Hashable {

    public var publishingChannelId: String
    public var ownerUserId: String
    public var name: String
    public var description: String?
    public var backgroundImageBlobFileKey: String?
    public var profilePictureBlobFileKey: String?
    public var publishingChannelRules: [String]
    public var externalUrls: [String]
    public var bannedWords: [String]
    public var owner: RenderableUser
    public var moderators: [RenderableUser]
    public var backgroundImageTemporaryUrl: String?
    public var profilePictureTemporaryUrl: String?
    public var followingStatusOfClientToPublishingChannel: FollowingStatus
    public var followers: RenderableUserFollowers

    public init(publishingChannelId: String, ownerUserId: String, name: String, description: String? = nil, backgroundImageBlobFileKey: String? = nil, profilePictureBlobFileKey: String? = nil, publishingChannelRules: [String], externalUrls: [String], bannedWords: [String], owner: RenderableUser, moderators: [RenderableUser], backgroundImageTemporaryUrl: String? = nil, profilePictureTemporaryUrl: String? = nil, followingStatusOfClientToPublishingChannel: FollowingStatus, followers: RenderableUserFollowers) {
        self.publishingChannelId = publishingChannelId
        self.ownerUserId = ownerUserId
        self.name = name
        self.description = description
        self.backgroundImageBlobFileKey = backgroundImageBlobFileKey
        self.profilePictureBlobFileKey = profilePictureBlobFileKey
        self.publishingChannelRules = publishingChannelRules
        self.externalUrls = externalUrls
        self.bannedWords = bannedWords
        self.owner = owner
        self.moderators = moderators
        self.backgroundImageTemporaryUrl = backgroundImageTemporaryUrl
        self.profilePictureTemporaryUrl = profilePictureTemporaryUrl
        self.followingStatusOfClientToPublishingChannel = followingStatusOfClientToPublishingChannel
        self.followers = followers
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case publishingChannelId
        case ownerUserId
        case name
        case description
        case backgroundImageBlobFileKey
        case profilePictureBlobFileKey
        case publishingChannelRules
        case externalUrls
        case bannedWords
        case owner
        case moderators
        case backgroundImageTemporaryUrl
        case profilePictureTemporaryUrl
        case followingStatusOfClientToPublishingChannel
        case followers
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(publishingChannelId, forKey: .publishingChannelId)
        try container.encode(ownerUserId, forKey: .ownerUserId)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(backgroundImageBlobFileKey, forKey: .backgroundImageBlobFileKey)
        try container.encodeIfPresent(profilePictureBlobFileKey, forKey: .profilePictureBlobFileKey)
        try container.encode(publishingChannelRules, forKey: .publishingChannelRules)
        try container.encode(externalUrls, forKey: .externalUrls)
        try container.encode(bannedWords, forKey: .bannedWords)
        try container.encode(owner, forKey: .owner)
        try container.encode(moderators, forKey: .moderators)
        try container.encodeIfPresent(backgroundImageTemporaryUrl, forKey: .backgroundImageTemporaryUrl)
        try container.encodeIfPresent(profilePictureTemporaryUrl, forKey: .profilePictureTemporaryUrl)
        try container.encode(followingStatusOfClientToPublishingChannel, forKey: .followingStatusOfClientToPublishingChannel)
        try container.encode(followers, forKey: .followers)
    }
}

