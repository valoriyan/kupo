//
// CreditCardSummary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreditCardSummary: Codable, JSONEncodable, Hashable {

    public var localCreditCardId: String
    public var userId: String
    public var isPrimaryCard: Bool
    public var creationTimestamp: Double
    public var last4: String
    public var expMonth: String
    public var expYear: String
    public var cardholderName: String
    public var brand: String

    public init(localCreditCardId: String, userId: String, isPrimaryCard: Bool, creationTimestamp: Double, last4: String, expMonth: String, expYear: String, cardholderName: String, brand: String) {
        self.localCreditCardId = localCreditCardId
        self.userId = userId
        self.isPrimaryCard = isPrimaryCard
        self.creationTimestamp = creationTimestamp
        self.last4 = last4
        self.expMonth = expMonth
        self.expYear = expYear
        self.cardholderName = cardholderName
        self.brand = brand
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case localCreditCardId
        case userId
        case isPrimaryCard
        case creationTimestamp
        case last4
        case expMonth
        case expYear
        case cardholderName
        case brand
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(localCreditCardId, forKey: .localCreditCardId)
        try container.encode(userId, forKey: .userId)
        try container.encode(isPrimaryCard, forKey: .isPrimaryCard)
        try container.encode(creationTimestamp, forKey: .creationTimestamp)
        try container.encode(last4, forKey: .last4)
        try container.encode(expMonth, forKey: .expMonth)
        try container.encode(expYear, forKey: .expYear)
        try container.encode(cardholderName, forKey: .cardholderName)
        try container.encode(brand, forKey: .brand)
    }
}

