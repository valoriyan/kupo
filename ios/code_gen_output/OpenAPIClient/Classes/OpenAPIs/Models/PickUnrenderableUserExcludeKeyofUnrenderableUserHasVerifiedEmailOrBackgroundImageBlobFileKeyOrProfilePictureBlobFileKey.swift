//
// PickUnrenderableUserExcludeKeyofUnrenderableUserHasVerifiedEmailOrBackgroundImageBlobFileKeyOrProfilePictureBlobFileKey.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** From T, pick a set of properties whose keys are in the union K */
public struct PickUnrenderableUserExcludeKeyofUnrenderableUserHasVerifiedEmailOrBackgroundImageBlobFileKeyOrProfilePictureBlobFileKey: Codable, JSONEncodable, Hashable {

    public var userId: String
    public var email: String
    public var username: String
    public var shortBio: String?
    public var userWebsite: String?
    public var phoneNumber: String?
    public var profilePrivacySetting: ProfilePrivacySetting
    public var preferredPagePrimaryColor: Color?
    public var creationTimestamp: Double
    public var isAdmin: Bool
    public var hasVerifiedEmail: Bool

    public init(userId: String, email: String, username: String, shortBio: String? = nil, userWebsite: String? = nil, phoneNumber: String? = nil, profilePrivacySetting: ProfilePrivacySetting, preferredPagePrimaryColor: Color? = nil, creationTimestamp: Double, isAdmin: Bool, hasVerifiedEmail: Bool) {
        self.userId = userId
        self.email = email
        self.username = username
        self.shortBio = shortBio
        self.userWebsite = userWebsite
        self.phoneNumber = phoneNumber
        self.profilePrivacySetting = profilePrivacySetting
        self.preferredPagePrimaryColor = preferredPagePrimaryColor
        self.creationTimestamp = creationTimestamp
        self.isAdmin = isAdmin
        self.hasVerifiedEmail = hasVerifiedEmail
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId
        case email
        case username
        case shortBio
        case userWebsite
        case phoneNumber
        case profilePrivacySetting
        case preferredPagePrimaryColor
        case creationTimestamp
        case isAdmin
        case hasVerifiedEmail
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userId, forKey: .userId)
        try container.encode(email, forKey: .email)
        try container.encode(username, forKey: .username)
        try container.encodeIfPresent(shortBio, forKey: .shortBio)
        try container.encodeIfPresent(userWebsite, forKey: .userWebsite)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encode(profilePrivacySetting, forKey: .profilePrivacySetting)
        try container.encodeIfPresent(preferredPagePrimaryColor, forKey: .preferredPagePrimaryColor)
        try container.encode(creationTimestamp, forKey: .creationTimestamp)
        try container.encode(isAdmin, forKey: .isAdmin)
        try container.encode(hasVerifiedEmail, forKey: .hasVerifiedEmail)
    }
}

