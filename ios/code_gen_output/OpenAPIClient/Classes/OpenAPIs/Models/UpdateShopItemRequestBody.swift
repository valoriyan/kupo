//
// UpdateShopItemRequestBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateShopItemRequestBody: Codable, JSONEncodable, Hashable {

    public var publishedItemId: String
    public var description: String?
    public var title: String?
    public var price: Double?
    public var scheduledPublicationTimestamp: Double?
    public var expirationTimestamp: Double?
    public var collaboratorUserIds: [String]?
    public var hashtags: [String]?

    public init(publishedItemId: String, description: String? = nil, title: String? = nil, price: Double? = nil, scheduledPublicationTimestamp: Double? = nil, expirationTimestamp: Double? = nil, collaboratorUserIds: [String]? = nil, hashtags: [String]? = nil) {
        self.publishedItemId = publishedItemId
        self.description = description
        self.title = title
        self.price = price
        self.scheduledPublicationTimestamp = scheduledPublicationTimestamp
        self.expirationTimestamp = expirationTimestamp
        self.collaboratorUserIds = collaboratorUserIds
        self.hashtags = hashtags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case publishedItemId
        case description
        case title
        case price
        case scheduledPublicationTimestamp
        case expirationTimestamp
        case collaboratorUserIds
        case hashtags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(publishedItemId, forKey: .publishedItemId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(scheduledPublicationTimestamp, forKey: .scheduledPublicationTimestamp)
        try container.encodeIfPresent(expirationTimestamp, forKey: .expirationTimestamp)
        try container.encodeIfPresent(collaboratorUserIds, forKey: .collaboratorUserIds)
        try container.encodeIfPresent(hashtags, forKey: .hashtags)
    }
}

